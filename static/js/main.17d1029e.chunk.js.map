{"version":3,"sources":["TreeVisualizer/NavigationBar/NavigationBar.jsx","TreeVisualizer/Additional/headerLogo.jsx","TreeVisualizer/Trees/BinarySearchTree/BinarySearchTreeTooltips/BinarySearchTreeTooltips.jsx","TreeVisualizer/Tooltips/Tooltips.jsx","TreeVisualizer/Additional/InputModal/InputModal.jsx","TreeVisualizer/Additional/ErrorMessage/ErrorMessage.jsx","TreeVisualizer/Additional/Queue.js","TreeVisualizer/Trees/BinarySearchTree/BinarySearchTree.jsx","TreeVisualizer/Additional/Helpers.js","TreeVisualizer/TreeVisualizer.jsx","serviceWorker.js","index.js"],"names":["NavigationBar","props","visualizer","trees","BST","name","operations","AVL","RBT","BHP","traversals","state","active_tree","menu_key","id","className","href","this","Object","keys","map","key","idx","onClick","changeTree","operation","op_idx","traversal","tr_idx","performOperation","type","toggleTooltips","target","rel","newProps","React","Component","BinarySearchTreeTooltips","SearchTooltips","InsertionTooltips","RemovalTooltips","TraversalTooltips","InitialTooltips","style","background","width","height","initialStateOperation","visibleClasses","appearDone","enterDone","exit","hiddenClasses","appearActive","enterActive","operationSteps","next","active","timeout","current","previous","CSSTransition","in","classNames","appear","getContent","getPreviousTooltips","getCurrentTooltips","getNextButton","InputModal","value","callback","updateInputValue","bind","confirm","cancel","e","parseInt","console","log","onChange","step","ErrorMessage","message","Queue","queue","length","val","push","shift","BinarySearchTreeNode","left","right","animations","initial","node","delay","line","visited","success","removed","moveAnimations","css","entering","entered","exiting","exited","BinarySearchTree","Initial","Generate","Reset","Insert","Remove","Search","root","removeValue","targetValue","targetNode","input","tooltipsStep","waiting","errorMessage","tooltips","destroy","receiveInput","advanceOperationStepFromTooltips","setState","nextProps","nextState","Date","getTime","performOperationStep","transform","getScaleFactor","Tree","advanceOperationStep","GenerateTree","ResetTree","InsertInTree","RemoveFromTree","SearchTree","TraverseTree","InitialTree","_this","setTimeout","elements","i","min","max","Math","floor","random","insert","remove","contains","curr","inOrderSuccessor","scale_factor","window","innerWidth","pow","tree_height","curr_height","pos","leftChild","rightChild","classes","join","node-value","rootWidth","Transition","node-layer","getNodeHover","getCricle","getConnectingLine","xmlns","r","cx","cy","fill","x","y","textAnchor","dominantBaseline","searchNode","deleteNode","getLine","addClass","x1","y1","x2","y2","setHideTraversalAnimations","setHideMoveAnimations","document","querySelector","classList","setHideAnimations","reset","insertNumElements","setGenerationAnimations","setInsertAnimations","setInsertionCompleteAnimations","setRemoveAnimations","setMoveSubtreeAnimations","add","setSearchAnimations","forceUpdate","setDFSTraversalAnimations","setBFSTraversalAnimations","empty","front","element","order","_delay","querySelectorAll","attributes","offsetWidth","setMoveSubtreeCompleteAnimations","setInOrderSuccessorAnimations","first","textContent","TreeVisualizer","tree","tree_key","new_key","Boolean","location","hostname","match","ReactDOM","render","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.17d1029e.chunk.js","sourcesContent":["import React from 'react';\r\n\r\nimport getHeaderLogo from '../Additional/headerLogo.jsx'\r\n\r\nimport '../../../node_modules/font-awesome/css/font-awesome.min.css';\r\nimport './NavigationBar.scss';\r\n\r\nexport default class NavigationBar extends React.Component {\r\n    constructor(props) {\r\n        super(props);\r\n\r\n        this.visualizer = this.props.visualizer;\r\n        \r\n        this.trees = {\r\n            BST : {\r\n                name : 'Binary Search Tree',\r\n                operations : [\r\n                    'Insert',\r\n                    'Remove',\r\n                    'Search',\r\n                    'Traversals'\r\n                ]\r\n            },\r\n            AVL : {\r\n                name : 'AVL Tree',\r\n                operations : [\r\n                    'Insert',\r\n                    'Remove',\r\n                    'Search'\r\n                ]\r\n            },\r\n            RBT : {\r\n                name : 'Red-Black Tree',\r\n                operations : [\r\n                    'Insert',\r\n                    'Remove',\r\n                    'Search'\r\n                ]\r\n            },\r\n            BHP : {\r\n                name : 'Binary Heap',\r\n                operations : [\r\n                    'Insert',\r\n                    'Top'\r\n                ]\r\n            },\r\n        };\r\n\r\n        this.traversals = [\r\n            'Pre-Order',\r\n            'In-Order',\r\n            'Post-Order',\r\n            'Level Order'\r\n        ];\r\n\r\n        this.state = {\r\n            active_tree: this.visualizer.state.menu_key\r\n        };\r\n    }\r\n\r\n    static getDerivedStateFromProps(newProps, state) {\r\n        if ( state.active_tree !== newProps.visualizer.state.menu_key ) {\r\n            return { active_tree: newProps.visualizer.state.menu_key };\r\n        }\r\n        else {\r\n            return null;\r\n        }\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <>\r\n                <div id='navbar-wrapper'>\r\n\r\n                    <div className='navbar-logo'>\r\n                        <a href='/tree-visualizer'>\r\n                            { getHeaderLogo() }\r\n                        </a>\r\n                    </div>\r\n                    \r\n                    <div id='tree-dropdown' className='dropdown'>\r\n                        <a\r\n                            className='dropdown-toggle'\r\n                            href='# '>\r\n                            { this.state.active_tree ? this.trees[ this.state.active_tree ][ 'name' ] : 'Select..' }\r\n                            <i className='fa fa-caret-down'></i>\r\n                        </a>\r\n\r\n                        <ul className='dropdown-menu'>\r\n                            {Object.keys(this.trees).map((key, idx) => (\r\n                                <li className='dropdown-menu-option' key={idx}>\r\n                                    <a\r\n                                        href='# '\r\n                                        onClick={() => this.visualizer.changeTree(key)}>\r\n                                        {this.trees[ key ][ 'name' ]}\r\n                                    </a>\r\n                                </li>\r\n                            ))}\r\n                        </ul>\r\n                    </div>\r\n                    \r\n                    { this.state.active_tree && (\r\n                        <>\r\n                            <div id='operations-dropdown' className='dropdown'>\r\n                                <a\r\n                                    className='dropdown-toggle'\r\n                                    href='# '>\r\n                                    Operations\r\n                                    <i className='fa fa-caret-down' />\r\n                                </a>\r\n\r\n                                <ul className='dropdown-menu'>\r\n                                    {this.trees[ this.state.active_tree ][ 'operations' ].map((operation, op_idx) => (\r\n\r\n                                        (operation === 'Traversals') ? (\r\n                                            <li id='traversals-submenu' className='dropdown-menu-option submenu' key={op_idx}>\r\n                                                <a\r\n                                                    className='submenu-toggle'\r\n                                                    href='# '>\r\n                                                    {operation}\r\n                                                    <i className='fa fa-caret-down' />\r\n                                                </a>\r\n\r\n                                                <ul className='dropdown-menu submenu-dropdown'>\r\n                                                    {this.traversals.map((traversal, tr_idx) => (\r\n                                                        <li className='dropdown-menu-option' key={tr_idx}>\r\n                                                            <a\r\n                                                                href='# '\r\n                                                                onClick={() => this.visualizer.performOperation(traversal)}>\r\n                                                                {traversal}\r\n                                                            </a>\r\n                                                        </li>\r\n                                                    ))}\r\n                                                </ul>\r\n                                            </li>\r\n                                        ) : (\r\n                                            <li className='dropdown-menu-option' key={op_idx}>\r\n                                                <a\r\n                                                    href='# '\r\n                                                    onClick={() => this.visualizer.performOperation(operation)}>\r\n                                                    {operation}\r\n                                                </a>\r\n                                            </li>\r\n                                        )\r\n\r\n                                    ))}\r\n                                </ul>\r\n                            </div>\r\n                        \r\n                            <div id='generate-tree' className='navbar-button'>\r\n                                <button\r\n                                    onClick={() => this.visualizer.performOperation('Generate')}>\r\n                                    Generate\r\n                                </button>\r\n                            </div>\r\n\r\n                            <div id='reset-tree' className='navbar-button'>\r\n                                <button\r\n                                    onClick={() => this.visualizer.performOperation('Reset')}>\r\n                                    Reset\r\n                                </button>\r\n                            </div>\r\n\r\n                            <div id='tooltips-toggle'>\r\n                                <span className='tooltips-text'>Tooltips:</span>\r\n                                <label className='switch'>\r\n                                    <input type='checkbox' onClick={this.visualizer.toggleTooltips} />\r\n                                    <span className='slider round' />\r\n                                </label>\r\n                            </div>\r\n\r\n                            <div id=\"about-information\">\r\n                                <div className=\"info-icon-wrapper\">\r\n                                    <i className=\"fas fa-info\" />\r\n                                </div>\r\n\r\n                                <div className=\"about-dialogue\">\r\n                                    <p>Project repository can be found <a href='https://github.com/jkelaty/tree-visualizer' target='_blank' rel=\"noopener noreferrer\">here</a>\r\n                                    </p>\r\n                                    <p>Created by Jonathan Kelaty</p>\r\n                                </div>\r\n                            </div>\r\n                        </>\r\n                    )}\r\n\r\n                </div>\r\n            </>\r\n        );\r\n    }\r\n}","import React from 'react';\r\n\r\nexport default function getHeaderLogo() {\r\n\r\n    const ascii_logo = `                                                                                                                                                                       \r\n                                                                                                                                                                       \r\n                                                                                                                                                                       \r\n                                                                                            *****( *,/,*(/*                                                            \r\n                                                                    ,,   . */            (#(##/##/#/((/(,,,                                                            \r\n                                                                .*,*/(*/*((*/*#(((**    *////%%##/((/(#((%#* *                                                         \r\n                                                            .*#/(###/(/##%(#(#&%(*/*/((//(#*/(#((*(((/*/*(##(////                                                      \r\n                                                            ((#(((%/((((#(#(##(**(((#(#/*/#*#(((%%%//((#%(%#%(%%/(#(*   ,                                              \r\n                                                        ,(##(#%(###%%#&(%%&%/%(#%%#&%%%#(((#(*/%(&%&&%##(%(&&%%%(/#(%((/*,                                             \r\n                                                    ,** .*/#/((#%#&&%%&*(//(##&&%%&%((##/%#((((/&%//(*(/(&%%###%%%%&%///*.                                             \r\n                                                ,, *#(((/(%*#%%&%%%#@@@&%##(%(#/%#%&%#%&&&&@#%##//##(##/(/*&&&&#&%#&/(&//,*                                            \r\n                                            ./##%%%#%%%#((#&&&&&@@&@&/#(##%#%%(&@&%%%##&&%&&%#@%%%%%&(&(#(((#&&%@%#(#%&(#(&(/*                                         \r\n                                            /*(((%#&%(%#(((#((&%@&@@@&(#(#%%&%&&@&%###%&%/%##%@&@@&##((#/#(*%%%#%(%(/@@#%%(*                                           \r\n                                        **/((##%#(((%##((#(((##@@&&(#(%%&&%&@&%&%#&%&%#(%/&%%(&&&@/%&&&&&&%(%%&%#&&&&@%%&&%(/##,                                       \r\n                                        ./(%((###&&(@(/(#%%&&%%%#%(#%@%#&&@&@&@##(#%#%#%&(@%&&&&&&%%&(##&(#(&&@@&@@@&%%#,                                              \r\n                                        #((#&%%&%&&&&%%&%%&&&@&&&/#(%#%%&%@@%@%##%%%%(%&%%&@&%&%%%##%#%((##(#%(%&&((%@&&#%&(%#                                         \r\n                                        ,(#%%&&&&&&&&@&&@@@@&@&@&%(##&%@&%&&&@@#%%&%&&/(#(/#&&&@#((##(%#&&(/%&&(%#(#/#(&%%/(,                                          \r\n                                        ./#%#&&%&%#%@@@&&@&@&%&%#&&&@@@@@@@@@@(#/(#@(#(&&&&@@%&(%%#%#%#((%&%%/(###((%%(/#&%%%##,.                                      \r\n                                        .(*%#&&%@&&(/(%##%@@@&@&&&&@%##&&*#%(%%&&@&@@@(&%&&&&&/@&&&%@@&((#(#/&%%&&(%&&&(&/*/.                                          \r\n                                    (/(((#.((%%@%##&&(%%%(%&%&&%#((%###%%%&&@@@%%%@&&&@@&%&&&%#&@@@%&&&&&@&(%&&&%#%%(%%&&%#%%%%(#/#/*                                  \r\n                                    ,(%#/(##((#@@@@#&&&&%%&&&((###%&%%@@#&&%%%&&&%@@&@&%&&&&&@#&@@@@#,#%%&%&@%&%&&%###(&@&%@%*(*.                                      \r\n                                    (/#/((####%##&%&&@(&%&&%&%&%%/%(%%%(&&&@&&@&&&&&&&&@@&(@&&@&&@%%%&%&&@%%(&&%%###%#@&@/&(..                                         \r\n                                ,((/##@@#&&@@&%&%%%@%##&&&@((%/%%(%#%&%%%&&@&&&@@%@&&(&((@&&&@%&&&&%&&%&@%#%@%&@&@%%&&%(#&%%###%#&((((// ,                             \r\n                                    ###&&@/%%%&%@@&@@&&%&&&&%#%@&@&%##%%&@&&@@%#%#%%%&%(##%%%#%@@&&&&&&@%@%&&@@&&%%%%#%(//&%((((%((/(#%#/(#((.                         \r\n                        */,((%//(#(((%&@&%&@@&%&@@%&%#@@%%&&@@@@@@%&&%&&@&&%%#%&%##%%%&@&%%%&&@&&%&(&&&&&&&&&(&&&(&(&##%%(#(&((%(##(//#                                \r\n                        ,((#(((#%##((/&%&/((/###&@@&&&@@&@&&&&@&@&@@%@&@@@&%@##%%(%#%@&@@@&((%@&%&(((&&@&#%&%%%##@&&%#%&%/%&@&@%@&&%%%##(#((*                          \r\n                        (##&####%&@@&@(%#&&%(#%#%%@&@%&&@&@&&&&@@@&&%%&&&&%%@#%#@%%&@&%(&&%/%%%%&%%%@@&@&&&&%%&&%%&%@%@%&(%@&@%&&&&&(%#%%%%/                           \r\n                        . (%&%#%&&@%&&&@@@%#&&%%%&%((&%#%##&@@&@&&%@&&%%&&%&&%&&&%%&%##/(/%(#&&%#%(((&(&%&&@&@#(&@&%(#%((%((#&@&%%%#(/%%&//*                           \r\n                        #%#,%/#(&(%@/ (#%&@%%&&(&%##&%@&&%&%@&@@@##&&&%&%&&&&(%#(#(//((%#%@&@@%%&&&&@%&&&@&%%##&&%@&%(@%%%%%#%((#%/#&%*                                \r\n                                (#%&&&&&&%%%/(%@@&%%%%#/(&%%%&@&&@@&@%%%&&%&&&@####(&&%%%%%#@&@&(%%##@&@&&%%&&&&@@&&&%&&@&&@(@%%%%&&/%%&%#&&&(// /                     \r\n                                #%%(##%%/ %/(#%&&&.* /%(,(,%%,,(&./&%&@&@%@&&*  %&%/% % &%&&&%%%&(&%%#((.@%@&%.&@#,#&&&&&&%%#%#&&&&@%%###%(.                           \r\n                                ./ ,* *#  .  %(&(,%%,/.*#  &**@@@&,%&&&&&&%%%  ..&&&&.(#&@&%@%%%&%%#%%#*%%      *. ... %%(&*&%(&/%%#&&%&%&%.(                          \r\n                                    *,%       /       #%%%&%&&,#%#&&&%(# %%%%  %&&%&&&&,.*% %     .*        , %#.. (/%@%(%%&&&(/..&%%%#&%%#(*                          \r\n                                                            *# (#*    .      *%%%%&&%&%%.    %/      /           .(#,*(@@*#//#%%%,  (,/##*,                            \r\n                                                                %*                %%&&%%#   %#,                  /.%(##&,%%      .#%**                                 \r\n                                                                                    .%%%%##%#.                      %/ /  ,.        .                                  \r\n                                                                                    %%%&%(                                                                             \r\n                                                                                    %#%%%,                                                                             \r\n                                                                                    %##%%,                                                                             \r\n                                                                                    %##%#(                                                                             \r\n                                                                                    %#%%%(                                                                             \r\n                                                                                    (#%%%#                                                                             \r\n                                                                                    ###%%%%*                                                                           \r\n                                                                    ...,,,,**/(((((##%#%#%###(#(....                                                                    `;\r\n\r\n    return (\r\n        <>\r\n            <span className=\"logo-text\">Tree Visualizer</span>\r\n\r\n            <code className=\"ascii-logo\"><span>\r\n                {ascii_logo}    \r\n            </span></code>\r\n        </>\r\n    );\r\n}","import React from 'react'\r\nimport Tooltips from '../../../Tooltips/Tooltips.jsx'\r\n//import{ CSSTransition } from 'react-transition-group'\r\n\r\nexport default class BinarySearchTreeTooltips extends Tooltips {\r\n    getContent(operation) {\r\n        switch( operation ) {\r\n            case 'Search':      return this.SearchTooltips();\r\n            case 'Insert':\r\n            case 'Insert 2':    return this.InsertionTooltips();\r\n            case 'Remove 1':\r\n            case 'Remove 2':\r\n            case 'Remove 3':\r\n            case 'Remove 4':    return this.RemovalTooltips();\r\n            case 'Pre-Order':\r\n            case 'In-Order':\r\n            case 'Post-Order':\r\n            case 'Level Order': return this.TraversalTooltips();\r\n            case 'Initial':\r\n            default:            return this.InitialTooltips();\r\n        }\r\n    }\r\n\r\n    InitialTooltips() {\r\n        return (\r\n            <>\r\n                <div style={{background:'blue',width:'100%',height:'100%'}}>\r\n                    {'Initial'}\r\n                </div>\r\n            </>\r\n        );\r\n    }\r\n\r\n    InsertionTooltips() {\r\n        return (\r\n            <>\r\n                <div style={{background:'green',width:'100%',height:'100%'}}>\r\n                    {'insert'}\r\n                </div>\r\n            </>\r\n        );\r\n    }\r\n\r\n    RemovalTooltips() {\r\n        return (\r\n            <>\r\n                <div style={{background:'red',width:'100%',height:'100%'}}>\r\n                    {'Remove'}\r\n                </div>\r\n            </>\r\n        );\r\n    }\r\n\r\n    SearchTooltips() {\r\n        return (\r\n            <>\r\n                <div style={{background:'yellow',width:'100%',height:'100%'}}>\r\n                    {'Search'}\r\n                </div>\r\n            </>\r\n        );\r\n    }\r\n\r\n    TraversalTooltips() {\r\n        return (\r\n            <>\r\n                <div style={{background:'orange',width:'100%',height:'100%'}}>\r\n                    {'Traverse'}\r\n                </div>\r\n            </>\r\n        );\r\n    }\r\n}","import React from 'react'\r\nimport{ CSSTransition } from 'react-transition-group'\r\n\r\nimport './Tooltips.scss';\r\n\r\nexport default class Tooltips extends React.Component {\r\n    constructor(props) {\r\n        super(props);\r\n\r\n        this.initialStateOperation = 'Initial';\r\n\r\n        this.visibleClasses = {\r\n            appearDone: 'visible',\r\n            enterDone: 'visible',\r\n            exit: 'visible'\r\n        };\r\n\r\n        this.hiddenClasses = {\r\n            appearActive: 'hiding',\r\n            enterActive: 'hiding',\r\n            appearDone: 'hidden',\r\n            enterDone: 'hidden'\r\n        };\r\n\r\n        this.operationSteps = this.props.operationSteps;\r\n        this.next = this.props.next;\r\n\r\n        this.state = {\r\n            active: this.props.active,\r\n            timeout: this.props.timeout,\r\n            operation: {\r\n                current: this.props.operation,\r\n                previous: this.props.operation\r\n            }\r\n        };\r\n    }\r\n\r\n    static getDerivedStateFromProps(newProps, state) {\r\n        if ( (state.active !== newProps.active) || (state.operation.current !== newProps.operation) ) {\r\n            return {\r\n                active: newProps.active,\r\n                timeout: newProps.timeout,\r\n                operation: {\r\n                    current: newProps.operation,\r\n                    previous: state.operation.current\r\n                }\r\n            };\r\n        }\r\n        else {\r\n            return null;\r\n        }\r\n    }\r\n\r\n    getContent() {\r\n        return null;\r\n    }\r\n\r\n    getPreviousTooltips() {\r\n        return (\r\n            <>\r\n                <CSSTransition\r\n                    in={this.state.operation.current !== this.state.operation.previous}\r\n                    timeout={500}\r\n                    classNames={this.hiddenClasses}\r\n                    appear={true}\r\n                    key={this.state.operation.previous}>\r\n\r\n                    <div className='prev-tooltips'>\r\n                        { this.getContent(this.state.operation.previous) }\r\n                    </div>\r\n\r\n                </CSSTransition>\r\n            </>\r\n        );\r\n    }\r\n\r\n    getCurrentTooltips() {\r\n        return (\r\n            <>\r\n                <CSSTransition\r\n                    in={this.state.operation.current !== this.state.operation.previous}\r\n                    timeout={500}\r\n                    classNames={this.visibleClasses}\r\n                    appear={true}\r\n                    key={this.state.operation.current}>\r\n\r\n                    <div className='curr-tooltips'>\r\n                        { this.getContent(this.state.operation.current) }\r\n                    </div>\r\n\r\n                </CSSTransition>\r\n            </>\r\n        );\r\n    }\r\n\r\n    getNextButton() {\r\n        return (\r\n            <>\r\n                <CSSTransition\r\n                    in={this.state.operation.current !== this.initialStateOperation}\r\n                    timeout={this.state.timeout}\r\n                    classNames={this.visibleClasses}\r\n                    appear={true}\r\n                    key={this.state.operation.current}>\r\n\r\n                    <a\r\n                        className='tooltips-next'\r\n                        href='# '\r\n                        onClick={this.next}>\r\n                        Next step\r\n                        <i className=\"fas fa-arrow-right\" />\r\n                        <div className='next-underline' />\r\n                    </a>\r\n\r\n                </CSSTransition>\r\n            </>\r\n        );\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <>\r\n                <CSSTransition\r\n                    in={this.state.active}\r\n                    timeout={0}\r\n                    classNames={this.visibleClasses}\r\n                    appear={true}>\r\n\r\n                    <div id='tooltips'>\r\n                        { this.getPreviousTooltips() }\r\n                        { this.getCurrentTooltips() }\r\n                        { this.getNextButton() }\r\n                    </div>\r\n\r\n                </CSSTransition>\r\n            </>\r\n        );\r\n    }\r\n}","import React from 'react'\r\n\r\nimport './InputModal.scss'\r\n\r\nexport default class InputModal extends React.Component {\r\n    constructor(props) {\r\n        super(props);\r\n        \r\n        this.value = null;\r\n\r\n        this.state = {\r\n            active: this.props.active,\r\n            operation: this.props.operation,\r\n            callback: this.props.callback\r\n        }\r\n\r\n        this.updateInputValue = this.updateInputValue.bind(this);\r\n        this.confirm = this.confirm.bind(this);\r\n        this.cancel = this.cancel.bind(this);\r\n    }\r\n\r\n    updateInputValue(e) {\r\n        this.value = parseInt( e.target.value );\r\n    }\r\n\r\n    confirm() {\r\n        this.state.callback(this.value);\r\n    }\r\n\r\n    cancel() {\r\n        this.state.callback(null);\r\n    }\r\n\r\n    render() {\r\n        console.log(this.state.active);\r\n        if ( this.state.active ) {\r\n            return (\r\n                <>\r\n                    <div id='prompt-container'>\r\n\r\n                        <div id='input-container'>\r\n                            <div id='input-message'>Please select element:</div>\r\n\r\n                            <input id='input-number' onChange={this.updateInputValue} type='number' step='1' />\r\n\r\n                            <button\r\n                                id='input-confirm'\r\n                                className='input-prompt-button'\r\n                                onClick={this.confirm}>\r\n                                    \r\n                                { this.state.operation }    \r\n\r\n                            </button>\r\n\r\n                            <button\r\n                                id='input-cancel'\r\n                                className='input-prompt-button'\r\n                                onClick={this.cancel}>\r\n                                    \r\n                                Cancel\r\n                            </button>\r\n                        </div>\r\n\r\n                        <div id='prompt-background' onClick={this.cancel} />\r\n\r\n                    </div>\r\n                </>\r\n            );\r\n        }\r\n        else {\r\n            return null;\r\n        }\r\n    }\r\n}","import React from 'react'\r\n\r\nimport './ErrorMessage.scss'\r\n\r\nexport default function ErrorMessage(props) {\r\n    return (\r\n        <>\r\n            {props.message ?\r\n                <div id=\"error-message\">\r\n                    <p>{props.message}</p>\r\n                </div>\r\n            : null}\r\n        </>\r\n    );\r\n}","export default class Queue {\r\n    constructor () {\r\n        this.queue = [];\r\n    }\r\n\r\n    empty() {\r\n        return ! this.queue.length;\r\n    }\r\n\r\n    push(val) {\r\n        this.queue.push(val);\r\n    }\r\n\r\n    front() {\r\n        return this.queue.shift();\r\n    }\r\n\r\n    size() {\r\n        return this.queue.length;\r\n    }\r\n}","import React from 'react'\r\nimport{ Transition, CSSTransition } from 'react-transition-group'\r\n\r\nimport BinarySearchTreeTooltips from './BinarySearchTreeTooltips/BinarySearchTreeTooltips.jsx'\r\nimport InputModal from '../../Additional/InputModal/InputModal.jsx'\r\nimport ErrorMessage from '../../Additional/ErrorMessage/ErrorMessage.jsx'\r\n\r\nimport Queue from '../../Additional/Queue.js'\r\nimport { randomIntFromInverval } from '../../Additional/Helpers.js'\r\n\r\nimport './BinarySearchTree.scss'\r\n\r\nclass BinarySearchTreeNode {\r\n    constructor(val) {\r\n        this.value = val;\r\n        this.left  = null;\r\n        this.right = null;\r\n\r\n        this.animations = {\r\n            initial: {\r\n                node: { active: false, delay: 0 },\r\n                line: { active: false, delay: 0 }\r\n            },\r\n            visited: {\r\n                node: { active: false, delay: 0 },\r\n                line: { active: false, delay: 0 }\r\n            },\r\n            success: {\r\n                node: { active: false, delay: 0 },\r\n                line: { active: false, delay: 0 }\r\n            },\r\n            removed: {\r\n                node: { active: false, delay: 0 },\r\n                line: { active: false, delay: 0 }\r\n            }\r\n        };\r\n\r\n        this.moveAnimations = {\r\n            active: false,\r\n            delay: 0,\r\n            css: {\r\n                entering: {},\r\n                entered:  {},\r\n                exiting:  {},\r\n                exited:   {}\r\n            }\r\n        };\r\n    }\r\n}\r\n\r\nexport default class BinarySearchTree extends React.Component {\r\n    constructor(props) {\r\n        super(props);\r\n\r\n        this.initialStateOperation = 'Initial';\r\n\r\n        this.visibleClasses = {\r\n            appearDone: 'visible',\r\n            enterDone: 'visible',\r\n            exit: 'visible'\r\n        };\r\n\r\n        this.operationSteps = {\r\n            Initial: [\r\n                'Initial'\r\n            ],\r\n            Generate: [\r\n                'Reset',\r\n                'Generate'\r\n            ],\r\n            Reset: [\r\n                'Hide',\r\n                'Reset'\r\n            ],\r\n            Insert: [\r\n                'Input',\r\n                'Insert',\r\n                'Complete'\r\n            ],\r\n            Remove: [\r\n                'Input',\r\n                'Remove 1',\r\n                'Remove 2',\r\n                'Remove 3',\r\n                'Remove 4',\r\n                'Complete'\r\n            ],\r\n            Search: [\r\n                'Input',\r\n                'Search'\r\n            ],\r\n            'Pre-Order': [\r\n                'Traverse'\r\n            ],\r\n            'In-Order': [\r\n                'Traverse'\r\n            ],\r\n            'Post-Order': [\r\n                'Traverse'\r\n            ],\r\n            'Level Order': [\r\n                'Traverse'\r\n            ]\r\n        };\r\n\r\n        this.name = 'BinarySearchTree';\r\n        this.key  = 'BST';\r\n        this.root = null;\r\n\r\n        this.removeValue = null;\r\n        this.targetValue = null;\r\n        this.targetNode = null;\r\n        this.timeout = 0;\r\n        this.input = false;\r\n        this.tooltipsStep = this.initialStateOperation;\r\n        this.waiting = false;\r\n        this.errorMessage = {\r\n            message: '',\r\n            key: null\r\n        };\r\n\r\n        this.state = {\r\n            operation: this.initialStateOperation,\r\n            step: 0,\r\n            tooltips: false,\r\n            destroy: false\r\n        };\r\n\r\n        this.receiveInput = this.receiveInput.bind(this);\r\n        this.advanceOperationStepFromTooltips = this.advanceOperationStepFromTooltips.bind(this);\r\n    }\r\n\r\n    componentDidMount() {\r\n        this.setState({ operation: 'Generate', step: 0 });\r\n    }\r\n    \r\n    static getDerivedStateFromProps(newProps, state) {\r\n        const initialStateOperation = 'Initial';\r\n        const destroyStateOperation = 'Destroy';\r\n\r\n        if ( newProps.operation === destroyStateOperation ) {\r\n            return { operation: 'Reset', step: 0, destroy: true };\r\n        }\r\n        else if ( newProps.operation !== initialStateOperation ) {\r\n            if ( state.operation === initialStateOperation ) {\r\n                return { operation: newProps.operation, tooltips: newProps.tooltips };\r\n            }\r\n            else if ( newProps.tooltips !== state.tooltips ) {\r\n                return { tooltips: newProps.tooltips };\r\n            }\r\n        }\r\n        else if ( newProps.tooltips !== state.tooltips ) {\r\n            return { tooltips: newProps.tooltips };\r\n        }\r\n\r\n        return null;\r\n    }\r\n\r\n    shouldComponentUpdate(nextProps, nextState) {\r\n        if ( nextState.destroy ) {\r\n            return true;\r\n        }\r\n        else if ( this.waiting && (this.state.tooltips === nextState.tooltips) ) {\r\n            if ( nextProps.operation !== this.initialStateOperation && nextProps.operation !== this.state.operation ) {\r\n                this.errorMessage['message'] = 'Error: Tree performing operation';\r\n                this.errorMessage['key'] = new Date().getTime();\r\n                return true;\r\n            }\r\n            return false;\r\n        }\r\n        else {\r\n            return true;\r\n        }\r\n    }\r\n\r\n    render() {\r\n        this.performOperationStep();\r\n\r\n        return (\r\n            <>\r\n                <InputModal active = {this.input} operation = {this.state.operation} callback = {this.receiveInput} key = {this.input} />\r\n\r\n                <ErrorMessage message = {this.errorMessage['message']} key = {this.errorMessage['key']} />\r\n\r\n                <div\r\n                    id={ this.name }\r\n                    className='tree'\r\n                    style={ {transform: this.getScaleFactor()} }>\r\n\r\n                    { this.Tree() }\r\n\r\n                </div>\r\n\r\n                <BinarySearchTreeTooltips\r\n                    active = {this.state.tooltips}\r\n                    operation = {this.tooltipsStep}\r\n                    next = {this.advanceOperationStepFromTooltips}\r\n                    timeout = {this.timeout}/>\r\n            </>\r\n        );\r\n    }\r\n\r\n    componentDidUpdate() {\r\n        this.advanceOperationStep();\r\n    }\r\n\r\n    /* Handle calling function to perform animations for a given operation */\r\n\r\n    performOperationStep() {\r\n        switch( this.state.operation ) {\r\n            case 'Generate':    this.GenerateTree();   break;\r\n            case 'Reset':       this.ResetTree();      break;\r\n            case 'Insert':      this.InsertInTree();   break;\r\n            case 'Remove':      this.RemoveFromTree(); break; \r\n            case 'Search':      this.SearchTree();     break;\r\n            case 'Pre-Order':\r\n            case 'In-Order':\r\n            case 'Post-Order':\r\n            case 'Level Order': this.TraverseTree();   break;\r\n            case 'Initial':\r\n            default:            this.InitialTree();    break;\r\n        }\r\n    }\r\n\r\n    /* Advances operation step asynchonously based on timeout set */\r\n    \r\n    advanceOperationStep() {\r\n        if ( this.state.operation !== this.initialStateOperation ) {\r\n            if ( this.state.step >= this.operationSteps[ this.state.operation ].length - 1 ) {\r\n                if ( ! this.waiting ) {\r\n                    let _this = this;\r\n                    _this.waiting = true;\r\n                    setTimeout(function() {\r\n                        _this.waiting = false;\r\n                        if ( ! _this.state.tooltips || (_this.timeout === 0) || (_this.state.operation === 'Generate') || (_this.state.operation === 'Reset') ) {\r\n                            _this.setState({ operation: 'Initial', step: 0 });\r\n                        }\r\n                    }, _this.timeout);\r\n                }\r\n            }\r\n            else {\r\n                if ( this.operationSteps[ this.state.operation ][ this.state.step ] === 'Input' ) return;\r\n\r\n                if ( ! this.waiting ) {\r\n                    let _this = this;\r\n                    _this.waiting = true;\r\n                    setTimeout(function() {\r\n                        _this.waiting = false;\r\n                        if ( ! _this.state.tooltips || (_this.timeout === 0) || (_this.state.operation === 'Generate') || (_this.state.operation === 'Reset') ) {\r\n                            _this.setState({ step: _this.state.step + 1 });\r\n                        }\r\n                    }, _this.timeout);\r\n                }\r\n            }\r\n        }\r\n    }\r\n\r\n    advanceOperationStepFromTooltips() {\r\n        if ( this.state.step >= this.operationSteps[ this.state.operation ].length - 1 ) {\r\n            this.setState({ operation: 'Initial', step: 0 });\r\n        }\r\n        else {\r\n            this.setState({ step: this.state.step + 1 });\r\n        }\r\n    }\r\n\r\n    /* Basic internal tree operations */\r\n\r\n    insertNumElements(elements) {\r\n        for (let i = 0; i < elements; ++i) {\r\n            let val = randomIntFromInverval(1, 150);\r\n            if ( this.insert( val ) ) {\r\n                if ( this.height() > 5 ) {\r\n                    this.root = this.remove( val );\r\n                    --i;\r\n                }\r\n            }\r\n            else {\r\n                --i;\r\n            }\r\n        }\r\n    }\r\n\r\n    reset() {\r\n        this.root = null;\r\n    }\r\n\r\n    height(node = this.root) {\r\n        if (node === null) return 0;\r\n        return Math.max( this.height(node.left), this.height(node.right) ) + 1;\r\n    }\r\n\r\n    contains(val, node = this.root) {\r\n        if ( ! node ) return false;\r\n\r\n        if (val < node.value) {\r\n            return this.contains(val, node.left);\r\n        }\r\n        else if (val > node.value) {\r\n            return this.contains(val, node.right);\r\n        }\r\n        else {\r\n            return true;\r\n        }\r\n    }\r\n\r\n    insert(val) {\r\n        if (this.root === null) {\r\n            this.root = new BinarySearchTreeNode(val);\r\n            return true;\r\n        }\r\n        \r\n        let curr = this.root;\r\n\r\n        while (true) {\r\n            if (curr.value === val) {\r\n                //tree contains key already\r\n                return false;\r\n            }\r\n            else if (curr.value < val) {\r\n                if(curr.right === null) {\r\n                    curr.right = new BinarySearchTreeNode(val);\r\n                    return true;\r\n                }\r\n                curr = curr.right;\r\n            }\r\n            else {\r\n                if(curr.left === null) {\r\n                    curr.left = new BinarySearchTreeNode(val);\r\n                    return true;\r\n                }\r\n                curr = curr.left;\r\n            }\r\n        }\r\n    }\r\n\r\n    remove(val, node = this.root) {\r\n        if ( ! val ) return;\r\n\r\n        if ( node === null ) return node;\r\n\r\n        if ( val < node.value ) {\r\n            node.left = this.remove(val, node.left);\r\n        }\r\n        else if ( val > node.value ) {\r\n            node.right = this.remove(val, node.right);\r\n        }\r\n        else {\r\n            if ( node.left === null ) {\r\n                return node.right;\r\n            }\r\n            else if ( node.right === null ) {\r\n                return node.left;\r\n            }\r\n            else {\r\n                node.value = this.inOrderSuccessor(node.right);\r\n                node.right = this.remove(node.value, node.right);\r\n            }\r\n        }\r\n\r\n        return node;\r\n    }\r\n\r\n    inOrderSuccessor(node) {\r\n        if ( node.left !== null ) {\r\n            return this.inOrderSuccessor(node.left);\r\n        }\r\n        else {\r\n            return node.value;\r\n        }\r\n    }\r\n\r\n    getScaleFactor() {\r\n        let scale_factor = (window.innerWidth - 20) / ( Math.pow(2, this.height() - 1) * 70 );\r\n        return 'scale(' + (scale_factor > 1 ? 1 : scale_factor) + ')';\r\n    }\r\n\r\n    /* Handle creating Tree nodes and lines in DOM */\r\n\r\n    Tree(node = this.root, tree_height = this.height(), curr_height = 0, pos = 'root') {\r\n        if (curr_height === tree_height) return null;\r\n\r\n        const leftChild  = this.Tree(node ? node.left  : null, tree_height, curr_height + 1, 'left');\r\n        const rightChild = this.Tree(node ? node.right : null, tree_height, curr_height + 1, 'right');\r\n        \r\n        const classes = ['node-wrapper', pos].join(' ');\r\n\r\n        if ( node === null ) {\r\n            return (\r\n                <>\r\n                    <div\r\n                        className={classes}\r\n                        node-value='null'>\r\n\r\n                        <div className='node-value' />\r\n\r\n                        {leftChild}\r\n                        {rightChild}\r\n                        \r\n                    </div>\r\n                </>\r\n            );\r\n        }\r\n        else {\r\n            const rootWidth = {\r\n                width: ( node === this.root ) ? Math.pow(2, tree_height - 1) * 70 + 'px' : null\r\n            };\r\n\r\n            return (\r\n                <>\r\n                    <Transition\r\n                        in={node.moveAnimations['active']}\r\n                        timeout={node.moveAnimations['delay']}\r\n                        appear={true}>\r\n\r\n                        {state => (\r\n\r\n                            <div\r\n                                className={classes}\r\n                                node-value={node.value}\r\n                                node-layer={tree_height - curr_height}\r\n                                style={( node === this.root && ! node.moveAnimations['active'] ) ? rootWidth : node.moveAnimations['css'][state]}>\r\n\r\n                                <CSSTransition\r\n                                    in={node.animations['initial']['node']['active']}\r\n                                    timeout={node.animations['initial']['node']['delay']}\r\n                                    classNames={this.visibleClasses}\r\n                                    appear={true}>\r\n\r\n                                    <div className='node-value'>\r\n                                        {this.getNodeHover(node.value)}\r\n                                        {this.getCricle(node)}\r\n                                    </div>\r\n\r\n                                </CSSTransition>\r\n\r\n                                {leftChild}\r\n                                {rightChild}\r\n\r\n                                {this.getConnectingLine(node, pos)}\r\n\r\n                            </div>\r\n                        )}\r\n\r\n                    </Transition>\r\n                </>\r\n            );\r\n        }\r\n    }\r\n\r\n    getCricle(node) {\r\n        return (\r\n            <>\r\n                <svg className='circle node-value-circle' xmlns='http://www.w3.org/2000/svg'>\r\n\r\n                    <circle className='circle node-circle initial' r='24' cx='25' cy='25' fill='none' />\r\n\r\n                    <CSSTransition\r\n                        in={node.animations['visited']['node']['active']}\r\n                        timeout={node.animations['visited']['node']['delay']}\r\n                        classNames={this.visibleClasses}\r\n                        appear={true}>\r\n\r\n                        <svg className='circle node-circle-traversal' xmlns='http://www.w3.org/2000/svg'>\r\n                            <circle className='circle node-circle-background visited' r='24' cx='25' cy='25' fill='none' />\r\n                            <circle className='circle node-circle visited' r='24' cx='25' cy='25' fill='none' />\r\n                        </svg>\r\n\r\n                    </CSSTransition>\r\n\r\n                    <CSSTransition\r\n                        in={node.animations['success']['node']['active']}\r\n                        timeout={node.animations['success']['node']['delay']}\r\n                        classNames={this.visibleClasses}\r\n                        appear={true}>\r\n\r\n                        <svg className='circle node-circle-traversal' xmlns='http://www.w3.org/2000/svg'>\r\n                            <circle className='circle node-circle-background success' r='24' cx='25' cy='25' fill='none' />\r\n                            <circle className='circle node-circle success' r='24' cx='25' cy='25' fill='none' />\r\n                        </svg>\r\n\r\n                    </CSSTransition>\r\n\r\n                    <CSSTransition\r\n                        in={node.animations['removed']['node']['active']}\r\n                        timeout={node.animations['removed']['node']['delay']}\r\n                        classNames={this.visibleClasses}\r\n                        appear={true}>\r\n\r\n                        <svg className='circle node-circle-traversal' xmlns='http://www.w3.org/2000/svg'>\r\n                            <circle className='circle node-circle-background removed' r='24' cx='25' cy='25' fill='none' />\r\n                            <circle className='circle node-circle removed' r='24' cx='25' cy='25' fill='none' />\r\n                        </svg>\r\n\r\n                    </CSSTransition>\r\n                    \r\n                    <text className='text node-value-text' x='50%' y='50%' fill='black' textAnchor='middle' dominantBaseline='central'>\r\n                        {node.value}\r\n                    </text>\r\n\r\n                </svg>\r\n            </>\r\n        );\r\n    }\r\n\r\n    getNodeHover(val) {\r\n        return (\r\n            <>\r\n                <CSSTransition\r\n                    in={this.state.operation === this.initialStateOperation}\r\n                    timeout={300}\r\n                    classNames={this.visibleClasses}\r\n                    appear={true}>\r\n\r\n                    <span className='node-hover'>\r\n                        <i className='fas fa-search' onClick={() => this.searchNode(val)} />\r\n                        <span className='search'>\r\n                            <svg className='circle' xmlns='http://www.w3.org/2000/svg'>\r\n                                <circle className='circle node-hover-circle' r='24' cx='25' cy='25' fill='none' />\r\n                            </svg>\r\n                        </span>\r\n\r\n                        <i className='fas fa-trash' onClick={() => this.deleteNode(val)} />\r\n                        <span className='trash'>\r\n                            <svg className='circle' xmlns='http://www.w3.org/2000/svg'>\r\n                                <circle className='circle node-hover-circle' r='24' cx='25' cy='25' fill='none' />\r\n                            </svg>\r\n                        </span>\r\n                    </span>\r\n\r\n                </CSSTransition>\r\n            </>\r\n        );\r\n    }\r\n    \r\n    getConnectingLine(node, pos) {\r\n        if (pos === 'left' || pos === 'right') {\r\n            return (\r\n                <>\r\n                    <CSSTransition\r\n                        in={node.animations['initial']['line']['active']}\r\n                        timeout={node.animations['initial']['line']['delay']}\r\n                        classNames={this.visibleClasses}\r\n                        appear={true}>\r\n\r\n                        <svg className='line node-line' xmlns='http://www.w3.org/2000/svg'>\r\n\r\n                            {this.getLine(pos, 'initial')}\r\n\r\n                            <CSSTransition\r\n                                in={node.animations['visited']['line']['active']}\r\n                                timeout={node.animations['visited']['line']['delay']}\r\n                                classNames={this.visibleClasses}\r\n                                appear={true}>\r\n\r\n                                {this.getLine(pos, 'visited')}\r\n\r\n                            </CSSTransition>\r\n\r\n                            <CSSTransition\r\n                                in={node.animations['success']['line']['active']}\r\n                                timeout={node.animations['success']['line']['delay']}\r\n                                classNames={this.visibleClasses}\r\n                                appear={true}>\r\n\r\n                                {this.getLine(pos, 'success')}\r\n\r\n                            </CSSTransition>\r\n\r\n                            <CSSTransition\r\n                                in={node.animations['removed']['line']['active']}\r\n                                timeout={node.animations['removed']['line']['delay']}\r\n                                classNames={this.visibleClasses}\r\n                                appear={true}>\r\n\r\n                                {this.getLine(pos, 'removed')}\r\n\r\n                            </CSSTransition>\r\n\r\n                        </svg>\r\n\r\n                    </CSSTransition>\r\n                </>\r\n            );\r\n        }\r\n        else {\r\n            return null;\r\n        }\r\n    }\r\n\r\n    getLine(pos, addClass) {\r\n        const classes = ['line', addClass].join(' ');\r\n\r\n        if (pos === 'left')\r\n            return ( <line className={classes} x1='0' y1='50' x2='100%' y2='0' /> );\r\n        else if (pos === 'right')\r\n            return ( <line className={classes} x1='0' y1='0' x2='100%' y2='50' /> );\r\n        else\r\n            return null;\r\n    }\r\n\r\n    /* Handle operation step */\r\n\r\n    InitialTree() {\r\n        this.removeValue = null;\r\n        this.targetValue = null;\r\n        this.targetNode = null;\r\n        this.timeout = 0;\r\n        this.input = false;\r\n        this.tooltipsStep = this.initialStateOperation;\r\n        this.waiting = false;\r\n\r\n        this.setHideTraversalAnimations();\r\n        this.setHideMoveAnimations();\r\n\r\n        setTimeout(function() {\r\n            if ( document.querySelector('.moved') ) {\r\n                document.querySelector('.moved').classList.remove('moved');\r\n            }\r\n        }, 100);\r\n    }\r\n\r\n    GenerateTree() {\r\n        this.tooltipsStep = this.initialStateOperation;\r\n\r\n        switch( this.operationSteps[ this.state.operation ][ this.state.step ] ) {\r\n            case 'Reset':\r\n                if (this.root) {\r\n                    this.setHideAnimations();\r\n                    this.timeout = 1000;\r\n                }\r\n                else {\r\n                    this.timeout = 0;\r\n                }\r\n                break;\r\n            case 'Generate':\r\n                this.reset();\r\n                this.insertNumElements(15);\r\n                this.setGenerationAnimations();\r\n                this.timeout = 0;\r\n                break;\r\n            default:\r\n                this.InitialTree();\r\n                break;\r\n        }\r\n    }\r\n    \r\n    ResetTree() {\r\n        this.tooltipsStep = this.initialStateOperation;\r\n\r\n        switch( this.operationSteps[ this.state.operation ][ this.state.step ] ) {\r\n            case 'Hide':\r\n                if (this.root) {\r\n                    this.setHideAnimations();\r\n                    this.timeout = 1000;\r\n                }\r\n                else {\r\n                    this.timeout = 0;\r\n                }\r\n                break;\r\n            case 'Reset':\r\n                this.reset();\r\n                this.timeout = 0;\r\n                break;\r\n            default:\r\n                this.InitialTree();\r\n                break;\r\n        }\r\n    }\r\n    \r\n    InsertInTree(val) {\r\n        this.tooltipsStep = this.initialStateOperation;\r\n\r\n        switch( this.operationSteps[ this.state.operation ][ this.state.step ] ) {\r\n            case 'Input':\r\n                this.input = true;\r\n                break;\r\n            case 'Insert':\r\n                if ( this.targetValue ) {\r\n                    if ( ! this.contains(this.targetValue) ) {\r\n                        this.insert(this.targetValue);\r\n                        this.timeout = this.setInsertAnimations();\r\n                        this.tooltipsStep = 'Insert';\r\n                    }\r\n                    else {\r\n                        this.targetValue = null;\r\n                        this.errorMessage['message'] = 'Error: Tree already contains element';\r\n                        this.errorMessage['key'] = new Date().getTime();\r\n                    }\r\n                }\r\n                break;\r\n            case 'Complete':\r\n                if ( this.targetValue ) {\r\n                    this.setInsertionCompleteAnimations();\r\n                    this.timeout = 5000;\r\n                    this.tooltipsStep = 'Insert 2';\r\n                }\r\n                break;\r\n            default:\r\n                this.InitialTree();\r\n                break;\r\n        }\r\n    }\r\n    \r\n    RemoveFromTree() {\r\n        this.tooltipsStep = this.initialStateOperation;\r\n\r\n        switch( this.operationSteps[ this.state.operation ][ this.state.step ] ) {\r\n            case 'Input':\r\n                if ( this.root ) {\r\n                    this.input = true;\r\n                }\r\n                else {\r\n                    this.errorMessage['message'] = 'Error: Tree is empty';\r\n                    this.errorMessage['key'] = new Date().getTime();\r\n                }\r\n                break;\r\n            case 'Remove 1':\r\n                if ( this.targetValue ) {\r\n                    if ( this.contains(this.targetValue) ) {\r\n                        this.timeout = this.setRemoveAnimations() + 3000;\r\n                        this.tooltipsStep = 'Remove 1';\r\n                    }\r\n                    else {\r\n                        this.targetValue = null;\r\n                        this.errorMessage['message'] = 'Error: Tree does not contain target element';\r\n                        this.errorMessage['key'] = new Date().getTime(); \r\n                    }\r\n                }\r\n                break;\r\n            case 'Remove 2':\r\n                if ( this.targetValue ) {\r\n                    this.tooltipsStep = 'Remove 2';\r\n                    this.timeout = this.setMoveSubtreeAnimations() + 3000;\r\n                }\r\n                break;\r\n            case 'Remove 3':\r\n                if ( this.targetValue && this.targetNode ) {\r\n                    this.tooltipsStep = 'Remove 3';\r\n                    this.timeout = this.setRemoveAnimations() + 3000;\r\n                }\r\n                else {\r\n                    this.timeout = 0;\r\n                }\r\n                break;\r\n            case 'Remove 4':\r\n                if ( this.targetValue && this.targetNode ) {\r\n                    this.tooltipsStep = 'Remove 4';\r\n                    this.timeout = this.setMoveSubtreeAnimations() + 3000;\r\n                }\r\n                else {\r\n                    this.timeout = 0;\r\n                }\r\n                break;\r\n            case 'Complete':\r\n                if ( this.targetValue ) {\r\n                    this.root = this.remove(this.removeValue);\r\n                    this.setHideMoveAnimations();\r\n                    this.setHideTraversalAnimations();\r\n                    document.querySelector('.node-wrapper[node-value=\"' + this.targetValue + '\"]').classList.add('moved');\r\n                    this.timeout = 0;\r\n                }\r\n                break;\r\n            default:\r\n                this.InitialTree();\r\n                break;\r\n        }\r\n    }\r\n    \r\n    SearchTree() {\r\n        this.tooltipsStep = this.initialStateOperation;\r\n\r\n        switch( this.operationSteps[ this.state.operation ][ this.state.step ] ) {\r\n            case 'Input':\r\n                if ( this.root ) {\r\n                    this.input = true;\r\n                }\r\n                else {\r\n                    this.errorMessage['message'] = 'Error: Tree is empty';\r\n                    this.errorMessage['key'] = new Date().getTime();\r\n                }\r\n                break;\r\n            case 'Search':\r\n                if ( this.targetValue ) {\r\n                    this.timeout = this.setSearchAnimations() + 7000;\r\n                    this.tooltipsStep = 'Search';\r\n\r\n                    if ( ! this.contains(this.targetValue) ) {\r\n                        let _this = this;\r\n                        setTimeout(function() {\r\n                            _this.errorMessage['message'] = 'Tree does not contain target element';\r\n                            _this.errorMessage['key'] = new Date().getTime();\r\n                            _this.forceUpdate();\r\n                        }, _this.timeout - 6000);\r\n                    }\r\n                }\r\n                break;\r\n            default:\r\n                this.InitialTree();\r\n                break;\r\n        }\r\n    }\r\n\r\n    TraverseTree() {\r\n        this.tooltipsStep = this.initialStateOperation;\r\n        \r\n        if ( this.root ) {\r\n            this.tooltipsStep = this.state.operation;\r\n\r\n            switch( this.state.operation ) {\r\n                case 'Pre-Order':\r\n                case 'In-Order':\r\n                case 'Post-Order':\r\n                    this.timeout = this.setDFSTraversalAnimations( this.state.operation ) + 5000;\r\n                    break;\r\n                case 'Level Order':\r\n                    this.timeout = this.setBFSTraversalAnimations() + 5000;\r\n                    break;\r\n                default:\r\n                    this.InitialTree();\r\n                    break;\r\n            }\r\n        }\r\n        else {\r\n            this.errorMessage['message'] = 'Error: Tree is empty';\r\n            this.errorMessage['key'] = new Date().getTime();\r\n        }\r\n    }\r\n\r\n    /* Node hover operations and input dialog */\r\n\r\n    receiveInput(val) {\r\n        this.targetValue = val;\r\n        this.input = false;\r\n\r\n        if ( this.state.operation === 'Remove' ){\r\n            this.deleteNode(val);\r\n        }\r\n        else {\r\n            this.setState({ step: this.state.step + 1 });\r\n        }\r\n    }\r\n\r\n    searchNode(val) {\r\n        this.targetValue = val;\r\n        this.setState({ operation: 'Search', step: 1 });\r\n    }\r\n\r\n    deleteNode(val) {\r\n        this.targetValue = val;\r\n        this.removeValue = val;\r\n        this.targetNode = this.root;\r\n        this.setState({ operation: 'Remove', step: 1 });\r\n    }\r\n\r\n    /* Set animations for nodes for given operation step */\r\n\r\n    setGenerationAnimations() {\r\n        let queue = new Queue();\r\n        queue.push(this.root);\r\n\r\n        let delay = 150;\r\n\r\n        while ( ! queue.empty() ) {\r\n            let node = queue.front();\r\n\r\n            if (node) {\r\n                queue.push(node.left);\r\n                queue.push(node.right);\r\n\r\n                for (let key in node.animations['initial']) {\r\n                    node.animations['initial'][key]['active'] = true;\r\n                    node.animations['initial'][key]['delay'] = delay;\r\n                }\r\n                \r\n                delay += 200;\r\n            }\r\n        }\r\n    }\r\n\r\n    setHideAnimations(node = this.root) {\r\n        if (node === null) return;\r\n\r\n        for (let state in node.animations) {\r\n            for (let element in node.animations[state]) {\r\n                node.animations[state][element]['active'] = false;\r\n                node.animations[state][element]['delay'] = 150;\r\n            }\r\n        }\r\n\r\n        this.setHideAnimations(node.left);\r\n        this.setHideAnimations(node.right);\r\n    }\r\n\r\n    setHideTraversalAnimations(node = this.root) {\r\n        if (node === null) return;\r\n\r\n        for (let state in node.animations) {\r\n            for (let element in node.animations[state]) {\r\n                if (state === 'initial') {\r\n                    node.animations[state][element]['active'] = true;\r\n                    node.animations[state][element]['delay'] = 0;\r\n                }\r\n                else {\r\n                    node.animations[state][element]['active'] = false;\r\n                    node.animations[state][element]['delay'] = 150;\r\n                }\r\n            }\r\n        }\r\n\r\n        this.setHideTraversalAnimations(node.left);\r\n        this.setHideTraversalAnimations(node.right);\r\n    }\r\n\r\n    setHideMoveAnimations(node = this.root) {\r\n        if (node === null) return;\r\n\r\n        node.moveAnimations['active'] = false;\r\n        node.moveAnimations['delay'] = 0;\r\n        node.moveAnimations['css'] = {\r\n            entering: {},\r\n            entered:  {},\r\n            exiting:  {},\r\n            exited:   {}\r\n        };\r\n\r\n        this.setHideMoveAnimations(node.left);\r\n        this.setHideMoveAnimations(node.right);\r\n    }\r\n\r\n    setDFSTraversalAnimations(order, node = this.root, delay = 150) {\r\n        if (node === null) return delay;\r\n\r\n        let _delay = node === this.root ? delay : delay + 1000;\r\n\r\n        node.animations['visited']['node']['active'] = true;\r\n        node.animations['visited']['node']['delay'] = _delay + 500;\r\n        node.animations['visited']['line']['active'] = true;\r\n        node.animations['visited']['line']['delay'] = _delay;\r\n\r\n        if (order === 'Pre-Order') {\r\n            _delay += 1000;\r\n            node.animations['success']['node']['active'] = true;\r\n            node.animations['success']['node']['delay'] = _delay;\r\n        }\r\n\r\n        _delay = this.setDFSTraversalAnimations(order, node.left, _delay);\r\n\r\n        if (order === 'In-Order') {\r\n            _delay += 1000;\r\n            node.animations['success']['node']['active'] = true;\r\n            node.animations['success']['node']['delay'] = _delay;\r\n        }\r\n\r\n        _delay = this.setDFSTraversalAnimations(order, node.right, _delay);\r\n\r\n        if (order === 'Post-Order') {\r\n            _delay += 1000;\r\n            node.animations['success']['node']['active'] = true;\r\n            node.animations['success']['node']['delay'] = _delay;\r\n        }\r\n\r\n        node.animations['success']['line']['active'] = true;\r\n        node.animations['success']['line']['delay'] = _delay;\r\n\r\n        return _delay;\r\n    }\r\n\r\n    setBFSTraversalAnimations() {\r\n        let queue = new Queue();\r\n\r\n        let delay = 150;\r\n\r\n        if (this.root) {\r\n            queue.push(this.root);\r\n\r\n            this.root.animations['visited']['node']['active'] = true;\r\n            this.root.animations['visited']['node']['delay'] = delay;\r\n        }\r\n\r\n        while ( ! queue.empty() ) {\r\n            let node = queue.front();\r\n\r\n            if (node) {\r\n                if (node.left) {\r\n                    queue.push(node.left);\r\n\r\n                    delay += 1000;\r\n                    for (let element in node.left.animations['visited']) {\r\n                        node.left.animations['visited'][element]['active'] = true;\r\n                        node.left.animations['visited'][element]['delay'] = delay;\r\n                    }\r\n                }\r\n\r\n                if (node.right) {\r\n                    queue.push(node.right);\r\n\r\n                    delay += 1000;\r\n                    for (let element in node.right.animations['visited']) {\r\n                        node.right.animations['visited'][element]['active'] = true;\r\n                        node.right.animations['visited'][element]['delay'] = delay;\r\n                    }\r\n                }\r\n                \r\n                delay += 1000;\r\n                for (let element in node.animations['success']) {\r\n                    node.animations['success'][element]['active'] = true;\r\n                    node.animations['success'][element]['delay'] = delay;\r\n                }\r\n            }\r\n        }\r\n\r\n        return delay;\r\n    }\r\n\r\n    setSearchAnimations(node = this.root, delay = 150) {\r\n        if ( ! this.targetValue || ! node ) return delay;\r\n        else {\r\n            let _delay = delay;\r\n\r\n            if (this.targetValue === node.value) {\r\n                node.animations['success']['node']['active'] = true;\r\n                node.animations['success']['node']['delay'] = delay + 1250;\r\n            }\r\n            else if (this.targetValue < node.value)\r\n                _delay = this.setSearchAnimations(node.left, delay + 1000);\r\n            else\r\n                _delay = this.setSearchAnimations(node.right, delay + 1000);\r\n                \r\n            node.animations['visited']['node']['active'] = true;\r\n            node.animations['visited']['node']['delay'] = delay + 500;\r\n            node.animations['visited']['line']['active'] = true;\r\n            node.animations['visited']['line']['delay'] = delay;\r\n\r\n            return _delay;\r\n        }\r\n    }\r\n\r\n    setInsertAnimations(node = this.root, delay = 150) {\r\n        if ( ! this.targetValue || ! node ) return delay;\r\n        else {\r\n            let _delay = delay;\r\n\r\n            if (this.targetValue === node.value) {\r\n                this.targetNode = node;\r\n                return _delay;\r\n            }\r\n            else if (this.targetValue < node.value)\r\n                _delay = this.setInsertAnimations(node.left, delay + 1000);\r\n            else\r\n                _delay = this.setInsertAnimations(node.right, delay + 1000);\r\n                \r\n            node.animations['visited']['node']['active'] = true;\r\n            node.animations['visited']['node']['delay'] = delay + 500;\r\n            node.animations['visited']['line']['active'] = true;\r\n            node.animations['visited']['line']['delay'] = delay;\r\n\r\n            return _delay;\r\n        }\r\n    }\r\n\r\n    setInsertionCompleteAnimations() {\r\n        let node = this.targetNode;\r\n\r\n        if ( node ) {\r\n            node.animations['initial']['node']['active'] = true;\r\n            node.animations['initial']['node']['delay'] = 650;\r\n            node.animations['initial']['line']['active'] = true;\r\n            node.animations['initial']['line']['delay'] = 150;\r\n            node.animations['success']['node']['active'] = true;\r\n            node.animations['success']['node']['delay'] = 1250;\r\n        }\r\n    }\r\n\r\n    setRemoveAnimations(node = this.targetNode, delay = 150) {\r\n        if ( ! this.targetValue || ! node ) return delay;\r\n        else {    \r\n            node.animations['visited']['node']['active'] = true;\r\n            node.animations['visited']['node']['delay'] = delay + 500;\r\n            node.animations['visited']['line']['active'] = true;\r\n            node.animations['visited']['line']['delay'] = delay;\r\n\r\n            if (this.targetValue === node.value) {\r\n                node.animations['success']['node']['active'] = false;\r\n                node.animations['success']['node']['delay'] = delay;\r\n                node.animations['success']['line']['active'] = false;\r\n                node.animations['success']['line']['delay'] = delay;\r\n\r\n                node.animations['removed']['node']['active'] = true;\r\n                node.animations['removed']['node']['delay'] = delay + 1500;\r\n                node.animations['removed']['line']['active'] = true;\r\n                node.animations['removed']['line']['delay'] = delay + 1000;\r\n\r\n                node.animations['initial']['node']['active'] = false;\r\n                node.animations['initial']['node']['delay'] = delay + 1500;\r\n                node.animations['initial']['line']['active'] = false;\r\n                node.animations['initial']['line']['delay'] = delay + 1500;\r\n\r\n                this.targetNode = node;\r\n            }\r\n            else if (this.targetValue < node.value)\r\n                return this.setRemoveAnimations(node.left, delay + 1000);\r\n            else\r\n                return this.setRemoveAnimations(node.right, delay + 1000);\r\n\r\n            return delay;\r\n        }\r\n    }\r\n\r\n    setMoveSubtreeAnimations() {\r\n        let node = this.targetNode;\r\n        let _delay = 0;\r\n\r\n        if ( node ) {\r\n            if ( node.left === null || node.right === null ) {\r\n                node.animations['initial']['line']['active'] = true;\r\n                node.animations['initial']['line']['delay'] = 3000;\r\n    \r\n                node.animations['visited']['node']['active'] = false;\r\n                node.animations['visited']['node']['delay'] = 150;\r\n                node.animations['visited']['line']['active'] = false;\r\n                node.animations['visited']['line']['delay'] = 150;\r\n    \r\n                node.animations['removed']['node']['active'] = false;\r\n                node.animations['removed']['node']['delay'] = 150;\r\n                node.animations['removed']['line']['active'] = false;\r\n                node.animations['removed']['line']['delay'] = 150;\r\n    \r\n                node.animations['success']['line']['active'] = true;\r\n                node.animations['success']['line']['delay'] = 3500;\r\n\r\n                if ( node.left === null && node.right === null ) {\r\n                    node.animations['initial']['line']['active'] = false;\r\n                    node.animations['initial']['line']['delay'] = 0;\r\n\r\n                    node.animations['success']['line']['active'] = false;\r\n                    node.animations['success']['line']['delay'] = 0;\r\n\r\n                    if (\r\n                        ( document.querySelectorAll('.node-wrapper[node-layer=\"1\"]').length === 1 ) && \r\n                        ( parseInt(document.querySelector('.node-wrapper[node-layer=\"1\"]').attributes['node-value'].value) === node.value )\r\n                    ) {\r\n                        this.root.moveAnimations['active'] = true;\r\n                        this.root.moveAnimations['delay'] = 1000;\r\n                        this.root.moveAnimations['css']['entering'] = {\r\n                            'width': document.querySelector('.root').offsetWidth + 'px'\r\n                        };\r\n                        this.root.moveAnimations['css']['entered'] = {\r\n                            'width': document.querySelector('.root').offsetWidth / 2 + 'px'\r\n                        };\r\n                    }\r\n                }\r\n                else {\r\n                    if ( node.left === null ) {\r\n                        node.right.animations['initial']['line']['active'] = false;\r\n                        node.right.animations['initial']['line']['delay'] = 150;\r\n                        \r\n                        node.right.moveAnimations['active'] = true;\r\n                        node.right.moveAnimations['delay'] = 1000;\r\n                        node.right.moveAnimations['css']['entered'] = {\r\n                            'width': '100%',\r\n                            'zIndex': '1000',\r\n                            'transform': 'translate(-50%, -50px)'\r\n                        };\r\n                        \r\n                        _delay = this.setMoveSubtreeCompleteAnimations(node.right);\r\n                    }\r\n                    else if ( node.right === null ) {\r\n                        node.left.animations['initial']['line']['active'] = false;\r\n                        node.left.animations['initial']['line']['delay'] = 150;\r\n                        \r\n                        node.left.moveAnimations['active'] = true;\r\n                        node.left.moveAnimations['delay'] = 1000;\r\n                        node.left.moveAnimations['css']['entered'] = {\r\n                            'width': '100%',\r\n                            'zIndex': '1000',\r\n                            'transform': 'translate(0, -50px)'\r\n                        };\r\n        \r\n                        _delay = this.setMoveSubtreeCompleteAnimations(node.left);\r\n                    }\r\n\r\n                    if (\r\n                        document.querySelectorAll('.node-wrapper[node-value=\"' + node.value + '\"] .node-wrapper[node-layer=\"1\"]').length\r\n                        === document.querySelectorAll('.node-wrapper[node-layer=\"1\"]').length\r\n                    ) {\r\n                        this.root.moveAnimations['active'] = true;\r\n                        this.root.moveAnimations['delay'] = 1000;\r\n                        this.root.moveAnimations['css']['entering'] = {\r\n                            'width': document.querySelector('.root').offsetWidth + 'px'\r\n                        };\r\n                        this.root.moveAnimations['css']['entered'] = {\r\n                            'width': document.querySelector('.root').offsetWidth / 2 + 'px'\r\n                        };\r\n                    }\r\n                    \r\n                    this.targetValue = node.value;\r\n                }\r\n\r\n                this.targetNode = null;\r\n            }\r\n            else {\r\n                let delay = this.setInOrderSuccessorAnimations(node.right);\r\n\r\n                delay += 1000;\r\n\r\n                node.animations['visited']['node']['active'] = false;\r\n                node.animations['visited']['node']['delay'] = delay;\r\n                node.animations['visited']['line']['active'] = false;\r\n                node.animations['visited']['line']['delay'] = delay;\r\n\r\n                node.animations['removed']['node']['active'] = false;\r\n                node.animations['removed']['node']['delay'] = delay;\r\n                node.animations['removed']['line']['active'] = false;\r\n                node.animations['removed']['line']['delay'] = delay;\r\n\r\n                delay += 1000;\r\n\r\n                node.animations['initial']['node']['active'] = true;\r\n                node.animations['initial']['node']['delay'] = delay;\r\n                node.animations['initial']['line']['active'] = true;\r\n                node.animations['initial']['line']['delay'] = delay + 500;\r\n\r\n                delay += 1000;\r\n\r\n                node.animations['success']['node']['active'] = true;\r\n                node.animations['success']['node']['delay'] = delay + 500;\r\n                node.animations['success']['line']['active'] = true;\r\n                node.animations['success']['line']['delay'] = delay;\r\n\r\n                _delay = delay;\r\n            }\r\n        }\r\n\r\n        return _delay;\r\n    }\r\n\r\n    setMoveSubtreeCompleteAnimations(node, delay = 4000, first = true) {\r\n        let _delay = delay;\r\n\r\n        if (node) {\r\n            if (first) {\r\n                node.animations['success']['node']['active'] = true;\r\n                node.animations['success']['node']['delay'] = delay;\r\n            }\r\n            else {\r\n                node.animations['success']['node']['active'] = true;\r\n                node.animations['success']['node']['delay'] = delay;\r\n                node.animations['success']['line']['active'] = true;\r\n                node.animations['success']['line']['delay'] = delay;\r\n            }\r\n\r\n            _delay = Math.max(\r\n                this.setMoveSubtreeCompleteAnimations(node.left, delay + 300, false), \r\n                this.setMoveSubtreeCompleteAnimations(node.right, delay + 300, false)\r\n            );\r\n        }\r\n\r\n        return _delay;\r\n    }\r\n\r\n    setInOrderSuccessorAnimations(node, delay = 150) {\r\n        node.animations['visited']['node']['active'] = true;\r\n        node.animations['visited']['node']['delay'] = delay + 500;\r\n        node.animations['visited']['line']['active'] = true;\r\n        node.animations['visited']['line']['delay'] = delay;\r\n\r\n        if ( node.left ) {\r\n            return this.setInOrderSuccessorAnimations(node.left, delay + 1000);\r\n        }\r\n        else {\r\n            node.animations['success']['node']['active'] = true;\r\n            node.animations['success']['node']['delay'] = delay + 1500;\r\n            node.animations['success']['line']['active'] = true;\r\n            node.animations['success']['line']['delay'] = delay + 1000;\r\n\r\n            document.querySelector('.node-wrapper[node-value=\"' + this.targetValue + '\"]>.node-value .node-value-text').textContent = node.value;\r\n\r\n            this.targetNode = node;\r\n            this.targetValue = node.value;\r\n\r\n            return delay + 1500;\r\n        }\r\n    }\r\n}","/* Taken from Stackoverflow */\r\nexport function randomIntFromInverval(min, max) {\r\n    return Math.floor(Math.random() * (max - min + 1) + min);\r\n}","import React from 'react';\r\n\r\nimport NavigationBar from './NavigationBar/NavigationBar.jsx'\r\n\r\nimport BinarySearchTree from './Trees/BinarySearchTree/BinarySearchTree.jsx'\r\n\r\nimport './TreeVisualizer.scss';\r\n\r\n\r\nexport default class TreeVisualizer extends React.Component {\r\n    constructor(props) {\r\n        super(props);\r\n        \r\n        this.initialStateOperation = 'Initial';\r\n\r\n        this.state = {\r\n            tree: 'BST',\r\n            menu_key: 'BST',\r\n            operation: this.initialStateOperation,\r\n            tooltips: false,\r\n            key: null\r\n        };\r\n\r\n        this.performOperation = this.performOperation.bind(this);\r\n        this.toggleTooltips   = this.toggleTooltips.bind(this);\r\n        this.changeTree       = this.changeTree.bind(this);\r\n    }\r\n\r\n    performOperation(operation) {\r\n        this.setState({ operation: operation });\r\n    }\r\n\r\n    toggleTooltips() {\r\n        this.setState({ tooltips: ! this.state.tooltips });\r\n    }\r\n\r\n    changeTree(tree_key) {\r\n        if (tree_key !== this.state.tree) {\r\n            let _this = this;\r\n            let new_key = new Date().getTime();\r\n\r\n            this.setState({ operation: 'Destroy', menu_key: tree_key, key: new_key });\r\n\r\n            setTimeout(function() {\r\n                if ( _this.state.key === new_key ) {\r\n                    _this.setState({ tree: tree_key });\r\n                }\r\n            }, 1500);\r\n        }\r\n    }\r\n\r\n    Tree() {\r\n        return (\r\n            <>\r\n                { this.state.tree === 'BST' ?\r\n                    <BinarySearchTree operation = {this.state.operation} tooltips = {this.state.tooltips} />\r\n                : null }\r\n            </>\r\n        );\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <>\r\n                <NavigationBar visualizer = {this} />\r\n                \r\n                { this.Tree() }\r\n            </>\r\n        );\r\n    }\r\n\r\n    componentDidUpdate() {\r\n        if ( this.state.operation !== this.initialStateOperation ) {\r\n            this.setState({ operation: this.initialStateOperation });\r\n        }\r\n    }\r\n}","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport TreeVisualizer from './TreeVisualizer/TreeVisualizer.jsx';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<TreeVisualizer />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}