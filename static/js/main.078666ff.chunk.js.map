{"version":3,"sources":["TreeVisualizer/NavigationBar/NavigationBar.jsx","TreeVisualizer/Additional/headerLogo.jsx","TreeVisualizer/Tooltips/Tooltips.jsx","TreeVisualizer/Additional/InputModal/InputModal.jsx","TreeVisualizer/Additional/ErrorMessage/ErrorMessage.jsx","TreeVisualizer/Additional/Queue.js","TreeVisualizer/Trees/BinarySearchTree/BinarySearchTree.jsx","TreeVisualizer/Additional/Helpers.js","TreeVisualizer/TreeVisualizer.jsx","serviceWorker.js","index.js"],"names":["NavigationBar","props","visualizer","trees","BST","name","operations","AVL","RBT","BHP","traversals","state","active_tree","menu_key","id","className","href","this","Object","keys","map","key","idx","onClick","changeTree","operation","op_idx","traversal","tr_idx","performOperation","type","toggleTooltips","target","rel","newProps","React","Component","Tooltips","active","step","next","InputModal","value","callback","updateInputValue","bind","confirm","cancel","e","parseInt","onChange","ErrorMessage","message","Queue","queue","length","val","push","shift","BinarySearchTreeNode","left","right","animations","initial","node","delay","line","visited","success","removed","moveAnimations","css","entering","entered","exiting","exited","BinarySearchTree","initialStateOperation","visibleClasses","appearDone","enterDone","exit","operationSteps","Initial","Generate","Reset","Insert","Remove","Search","root","removeValue","targetValue","targetNode","timeout","input","waiting","errorMessage","tooltips","destroy","receiveInput","advanceOperationStepFromTooltips","setState","nextProps","nextState","Date","getTime","performOperationStep","style","transform","getScaleFactor","Tree","advanceOperationStep","GenerateTree","ResetTree","InsertInTree","RemoveFromTree","SearchTree","TraverseTree","InitialTree","_this","setTimeout","elements","i","min","max","Math","floor","random","insert","height","remove","contains","curr","inOrderSuccessor","scale_factor","window","innerWidth","pow","tree_height","curr_height","pos","leftChild","rightChild","classes","join","node-value","rootWidth","width","Transition","in","appear","node-layer","CSSTransition","classNames","getNodeHover","getCricle","getConnectingLine","xmlns","r","cx","cy","fill","x","y","textAnchor","dominantBaseline","searchNode","deleteNode","getLine","addClass","x1","y1","x2","y2","setHideTraversalAnimations","setHideMoveAnimations","document","querySelector","classList","setHideAnimations","reset","insertNumElements","setGenerationAnimations","setInsertAnimations","setInsertionCompleteAnimations","setRemoveAnimations","setMoveSubtreeAnimations","add","setSearchAnimations","forceUpdate","setDFSTraversalAnimations","setBFSTraversalAnimations","empty","front","element","order","_delay","querySelectorAll","attributes","offsetWidth","setMoveSubtreeCompleteAnimations","setInOrderSuccessorAnimations","first","textContent","TreeVisualizer","tree","tree_key","new_key","Boolean","location","hostname","match","ReactDOM","render","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.078666ff.chunk.js","sourcesContent":["import React from 'react';\r\n\r\nimport getHeaderLogo from '../Additional/headerLogo.jsx'\r\n\r\nimport '../../../node_modules/font-awesome/css/font-awesome.min.css';\r\nimport './NavigationBar.scss';\r\n\r\nexport default class NavigationBar extends React.Component {\r\n    constructor(props) {\r\n        super(props);\r\n\r\n        this.visualizer = this.props.visualizer;\r\n        \r\n        this.trees = {\r\n            BST : {\r\n                name : 'Binary Search Tree',\r\n                operations : [\r\n                    'Insert',\r\n                    'Remove',\r\n                    'Search',\r\n                    'Traversals'\r\n                ]\r\n            },\r\n            AVL : {\r\n                name : 'AVL Tree',\r\n                operations : [\r\n                    'Insert',\r\n                    'Remove',\r\n                    'Search'\r\n                ]\r\n            },\r\n            RBT : {\r\n                name : 'Red-Black Tree',\r\n                operations : [\r\n                    'Insert',\r\n                    'Remove',\r\n                    'Search'\r\n                ]\r\n            },\r\n            BHP : {\r\n                name : 'Binary Heap',\r\n                operations : [\r\n                    'Insert',\r\n                    'Top'\r\n                ]\r\n            },\r\n        };\r\n\r\n        this.traversals = [\r\n            'Pre-Order',\r\n            'In-Order',\r\n            'Post-Order',\r\n            'Level Order'\r\n        ];\r\n\r\n        this.state = {\r\n            active_tree: this.visualizer.state.menu_key\r\n        };\r\n    }\r\n\r\n    static getDerivedStateFromProps(newProps, state) {\r\n        if ( state.active_tree !== newProps.visualizer.state.menu_key ) {\r\n            return { active_tree: newProps.visualizer.state.menu_key };\r\n        }\r\n        else {\r\n            return null;\r\n        }\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <>\r\n                <div id='navbar-wrapper'>\r\n\r\n                    <div className='navbar-logo'>\r\n                        <a href='/'>\r\n                            {getHeaderLogo()}\r\n                        </a>\r\n                    </div>\r\n                    \r\n                    <div id='tree-dropdown' className='dropdown'>\r\n                        <a\r\n                            className='dropdown-toggle'\r\n                            href='# '>\r\n                            { this.state.active_tree ? this.trees[ this.state.active_tree ][ 'name' ] : 'Select..' }\r\n                            <i className='fa fa-caret-down'></i>\r\n                        </a>\r\n\r\n                        <ul className='dropdown-menu'>\r\n                            {Object.keys(this.trees).map((key, idx) => (\r\n                                <li className='dropdown-menu-option' key={idx}>\r\n                                    <a\r\n                                        href='# '\r\n                                        onClick={() => this.visualizer.changeTree(key)}>\r\n                                        {this.trees[ key ][ 'name' ]}\r\n                                    </a>\r\n                                </li>\r\n                            ))}\r\n                        </ul>\r\n                    </div>\r\n                    \r\n                    { this.state.active_tree && (\r\n                        <>\r\n                            <div id='operations-dropdown' className='dropdown'>\r\n                                <a\r\n                                    className='dropdown-toggle'\r\n                                    href='# '>\r\n                                    Operations\r\n                                    <i className='fa fa-caret-down' />\r\n                                </a>\r\n\r\n                                <ul className='dropdown-menu'>\r\n                                    {this.trees[ this.state.active_tree ][ 'operations' ].map((operation, op_idx) => (\r\n\r\n                                        (operation === 'Traversals') ? (\r\n                                            <li id='traversals-submenu' className='dropdown-menu-option submenu' key={op_idx}>\r\n                                                <a\r\n                                                    className='submenu-toggle'\r\n                                                    href='# '>\r\n                                                    {operation}\r\n                                                    <i className='fa fa-caret-down' />\r\n                                                </a>\r\n\r\n                                                <ul className='dropdown-menu submenu-dropdown'>\r\n                                                    {this.traversals.map((traversal, tr_idx) => (\r\n                                                        <li className='dropdown-menu-option' key={tr_idx}>\r\n                                                            <a\r\n                                                                href='# '\r\n                                                                onClick={() => this.visualizer.performOperation(traversal)}>\r\n                                                                {traversal}\r\n                                                            </a>\r\n                                                        </li>\r\n                                                    ))}\r\n                                                </ul>\r\n                                            </li>\r\n                                        ) : (\r\n                                            <li className='dropdown-menu-option' key={op_idx}>\r\n                                                <a\r\n                                                    href='# '\r\n                                                    onClick={() => this.visualizer.performOperation(operation)}>\r\n                                                    {operation}\r\n                                                </a>\r\n                                            </li>\r\n                                        )\r\n\r\n                                    ))}\r\n                                </ul>\r\n                            </div>\r\n                        \r\n                            <div id='generate-tree' className='navbar-button'>\r\n                                <button\r\n                                    onClick={() => this.visualizer.performOperation('Generate')}>\r\n                                    Generate\r\n                                </button>\r\n                            </div>\r\n\r\n                            <div id='reset-tree' className='navbar-button'>\r\n                                <button\r\n                                    onClick={() => this.visualizer.performOperation('Reset')}>\r\n                                    Reset\r\n                                </button>\r\n                            </div>\r\n\r\n                            <div id='tooltips-toggle'>\r\n                                <span className='tooltips-text'>Tooltips:</span>\r\n                                <label className='switch'>\r\n                                    <input type='checkbox' onClick={this.visualizer.toggleTooltips} />\r\n                                    <span className='slider round' />\r\n                                </label>\r\n                            </div>\r\n\r\n                            <div id=\"about-information\">\r\n                                <div className=\"info-icon-wrapper\">\r\n                                    <i className=\"fas fa-info\" />\r\n                                </div>\r\n\r\n                                <div className=\"about-dialogue\">\r\n                                    <p>Project repository can be found <a href='https://github.com/jkelaty/tree-visualizer' target='_blank' rel=\"noopener noreferrer\">here</a>\r\n                                    </p>\r\n                                    <p>Created by Jonathan Kelaty</p>\r\n                                </div>\r\n                            </div>\r\n                        </>\r\n                    )}\r\n\r\n                </div>\r\n            </>\r\n        );\r\n    }\r\n}","import React from 'react';\r\n\r\nexport default function getHeaderLogo() {\r\n\r\n    const ascii_logo = `                                                                                                                                                                       \r\n                                                                                                                                                                       \r\n                                                                                                                                                                       \r\n                                                                                            *****( *,/,*(/*                                                            \r\n                                                                    ,,   . */            (#(##/##/#/((/(,,,                                                            \r\n                                                                .*,*/(*/*((*/*#(((**    *////%%##/((/(#((%#* *                                                         \r\n                                                            .*#/(###/(/##%(#(#&%(*/*/((//(#*/(#((*(((/*/*(##(////                                                      \r\n                                                            ((#(((%/((((#(#(##(**(((#(#/*/#*#(((%%%//((#%(%#%(%%/(#(*   ,                                              \r\n                                                        ,(##(#%(###%%#&(%%&%/%(#%%#&%%%#(((#(*/%(&%&&%##(%(&&%%%(/#(%((/*,                                             \r\n                                                    ,** .*/#/((#%#&&%%&*(//(##&&%%&%((##/%#((((/&%//(*(/(&%%###%%%%&%///*.                                             \r\n                                                ,, *#(((/(%*#%%&%%%#@@@&%##(%(#/%#%&%#%&&&&@#%##//##(##/(/*&&&&#&%#&/(&//,*                                            \r\n                                            ./##%%%#%%%#((#&&&&&@@&@&/#(##%#%%(&@&%%%##&&%&&%#@%%%%%&(&(#(((#&&%@%#(#%&(#(&(/*                                         \r\n                                            /*(((%#&%(%#(((#((&%@&@@@&(#(#%%&%&&@&%###%&%/%##%@&@@&##((#/#(*%%%#%(%(/@@#%%(*                                           \r\n                                        **/((##%#(((%##((#(((##@@&&(#(%%&&%&@&%&%#&%&%#(%/&%%(&&&@/%&&&&&&%(%%&%#&&&&@%%&&%(/##,                                       \r\n                                        ./(%((###&&(@(/(#%%&&%%%#%(#%@%#&&@&@&@##(#%#%#%&(@%&&&&&&%%&(##&(#(&&@@&@@@&%%#,                                              \r\n                                        #((#&%%&%&&&&%%&%%&&&@&&&/#(%#%%&%@@%@%##%%%%(%&%%&@&%&%%%##%#%((##(#%(%&&((%@&&#%&(%#                                         \r\n                                        ,(#%%&&&&&&&&@&&@@@@&@&@&%(##&%@&%&&&@@#%%&%&&/(#(/#&&&@#((##(%#&&(/%&&(%#(#/#(&%%/(,                                          \r\n                                        ./#%#&&%&%#%@@@&&@&@&%&%#&&&@@@@@@@@@@(#/(#@(#(&&&&@@%&(%%#%#%#((%&%%/(###((%%(/#&%%%##,.                                      \r\n                                        .(*%#&&%@&&(/(%##%@@@&@&&&&@%##&&*#%(%%&&@&@@@(&%&&&&&/@&&&%@@&((#(#/&%%&&(%&&&(&/*/.                                          \r\n                                    (/(((#.((%%@%##&&(%%%(%&%&&%#((%###%%%&&@@@%%%@&&&@@&%&&&%#&@@@%&&&&&@&(%&&&%#%%(%%&&%#%%%%(#/#/*                                  \r\n                                    ,(%#/(##((#@@@@#&&&&%%&&&((###%&%%@@#&&%%%&&&%@@&@&%&&&&&@#&@@@@#,#%%&%&@%&%&&%###(&@&%@%*(*.                                      \r\n                                    (/#/((####%##&%&&@(&%&&%&%&%%/%(%%%(&&&@&&@&&&&&&&&@@&(@&&@&&@%%%&%&&@%%(&&%%###%#@&@/&(..                                         \r\n                                ,((/##@@#&&@@&%&%%%@%##&&&@((%/%%(%#%&%%%&&@&&&@@%@&&(&((@&&&@%&&&&%&&%&@%#%@%&@&@%%&&%(#&%%###%#&((((// ,                             \r\n                                    ###&&@/%%%&%@@&@@&&%&&&&%#%@&@&%##%%&@&&@@%#%#%%%&%(##%%%#%@@&&&&&&@%@%&&@@&&%%%%#%(//&%((((%((/(#%#/(#((.                         \r\n                        */,((%//(#(((%&@&%&@@&%&@@%&%#@@%%&&@@@@@@%&&%&&@&&%%#%&%##%%%&@&%%%&&@&&%&(&&&&&&&&&(&&&(&(&##%%(#(&((%(##(//#                                \r\n                        ,((#(((#%##((/&%&/((/###&@@&&&@@&@&&&&@&@&@@%@&@@@&%@##%%(%#%@&@@@&((%@&%&(((&&@&#%&%%%##@&&%#%&%/%&@&@%@&&%%%##(#((*                          \r\n                        (##&####%&@@&@(%#&&%(#%#%%@&@%&&@&@&&&&@@@&&%%&&&&%%@#%#@%%&@&%(&&%/%%%%&%%%@@&@&&&&%%&&%%&%@%@%&(%@&@%&&&&&(%#%%%%/                           \r\n                        . (%&%#%&&@%&&&@@@%#&&%%%&%((&%#%##&@@&@&&%@&&%%&&%&&%&&&%%&%##/(/%(#&&%#%(((&(&%&&@&@#(&@&%(#%((%((#&@&%%%#(/%%&//*                           \r\n                        #%#,%/#(&(%@/ (#%&@%%&&(&%##&%@&&%&%@&@@@##&&&%&%&&&&(%#(#(//((%#%@&@@%%&&&&@%&&&@&%%##&&%@&%(@%%%%%#%((#%/#&%*                                \r\n                                (#%&&&&&&%%%/(%@@&%%%%#/(&%%%&@&&@@&@%%%&&%&&&@####(&&%%%%%#@&@&(%%##@&@&&%%&&&&@@&&&%&&@&&@(@%%%%&&/%%&%#&&&(// /                     \r\n                                #%%(##%%/ %/(#%&&&.* /%(,(,%%,,(&./&%&@&@%@&&*  %&%/% % &%&&&%%%&(&%%#((.@%@&%.&@#,#&&&&&&%%#%#&&&&@%%###%(.                           \r\n                                ./ ,* *#  .  %(&(,%%,/.*#  &**@@@&,%&&&&&&%%%  ..&&&&.(#&@&%@%%%&%%#%%#*%%      *. ... %%(&*&%(&/%%#&&%&%&%.(                          \r\n                                    *,%       /       #%%%&%&&,#%#&&&%(# %%%%  %&&%&&&&,.*% %     .*        , %#.. (/%@%(%%&&&(/..&%%%#&%%#(*                          \r\n                                                            *# (#*    .      *%%%%&&%&%%.    %/      /           .(#,*(@@*#//#%%%,  (,/##*,                            \r\n                                                                %*                %%&&%%#   %#,                  /.%(##&,%%      .#%**                                 \r\n                                                                                    .%%%%##%#.                      %/ /  ,.        .                                  \r\n                                                                                    %%%&%(                                                                             \r\n                                                                                    %#%%%,                                                                             \r\n                                                                                    %##%%,                                                                             \r\n                                                                                    %##%#(                                                                             \r\n                                                                                    %#%%%(                                                                             \r\n                                                                                    (#%%%#                                                                             \r\n                                                                                    ###%%%%*                                                                           \r\n                                                                    ...,,,,**/(((((##%#%#%###(#(....                                                                    `;\r\n\r\n    return (\r\n        <>\r\n            <span className=\"logo-text\">Tree Visualizer</span>\r\n\r\n            <code className=\"ascii-logo\"><span>\r\n                {ascii_logo}    \r\n            </span></code>\r\n        </>\r\n    );\r\n}","import React from 'react';\r\n\r\nimport './Tooltips.scss';\r\n\r\nexport default class Tooltips extends React.Component {\r\n    constructor(props) {\r\n        super(props);\r\n\r\n        this.state = {\r\n            active: this.props.active,\r\n            operation: this.props.operation,\r\n            step: this.props.step\r\n        };\r\n    }\r\n\r\n    static getDerivedStateFromProps(newProps, state) {\r\n        if ( state.active !== newProps.active ) {\r\n            return { active: newProps.active };\r\n        }\r\n        else {\r\n            return null;\r\n        }\r\n    }\r\n\r\n    render() {\r\n        if( this.state.active ) {\r\n            return (\r\n                <>\r\n                    <div id=\"tooltips\">\r\n                        <div>Tooltips active</div>\r\n                        <div>{this.state.operation} : {this.state.step}</div>\r\n                        <button onClick={this.props.next}>Next</button>\r\n                    </div>\r\n                </>\r\n            );\r\n        }\r\n        else {\r\n            return null;\r\n        }\r\n    }\r\n}","import React from 'react'\r\n\r\nimport './InputModal.scss'\r\n\r\nexport default class InputModal extends React.Component {\r\n    constructor(props) {\r\n        super(props);\r\n        \r\n        this.value = null;\r\n\r\n        this.state = {\r\n            operation: this.props.operation,\r\n            callback: this.props.callback\r\n        }\r\n\r\n        this.updateInputValue = this.updateInputValue.bind(this);\r\n        this.confirm = this.confirm.bind(this);\r\n        this.cancel = this.cancel.bind(this);\r\n    }\r\n\r\n    updateInputValue(e) {\r\n        this.value = parseInt( e.target.value );\r\n    }\r\n\r\n    confirm() {\r\n        this.state.callback(this.value);\r\n    }\r\n\r\n    cancel() {\r\n        this.state.callback(null);\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <>\r\n                <div id='prompt-container'>\r\n\r\n                    <div id='input-container'>\r\n                        <div id='input-message'>Please select element:</div>\r\n\r\n                        <input id='input-number' onChange={this.updateInputValue} type='number' step='1' />\r\n\r\n                        <button\r\n                            id='input-confirm'\r\n                            className='input-prompt-button'\r\n                            onClick={this.confirm}>\r\n                                \r\n                            { this.state.operation }    \r\n\r\n                        </button>\r\n\r\n                        <button\r\n                            id='input-cancel'\r\n                            className='input-prompt-button'\r\n                            onClick={this.cancel}>\r\n                                \r\n                            Cancel\r\n                        </button>\r\n                    </div>\r\n\r\n                    <div id='prompt-background' onClick={this.cancel} />\r\n\r\n                </div>\r\n            </>\r\n        );\r\n    }\r\n}","import React from 'react'\r\n\r\nimport './ErrorMessage.scss'\r\n\r\nexport default function ErrorMessage(props) {\r\n    return (\r\n        <>\r\n            {props.message ?\r\n                <div id=\"error-message\">\r\n                    <p>{props.message}</p>\r\n                </div>\r\n            : null}\r\n        </>\r\n    );\r\n}","export default class Queue {\r\n    constructor () {\r\n        this.queue = [];\r\n    }\r\n\r\n    empty() {\r\n        return ! this.queue.length;\r\n    }\r\n\r\n    push(val) {\r\n        this.queue.push(val);\r\n    }\r\n\r\n    front() {\r\n        return this.queue.shift();\r\n    }\r\n\r\n    size() {\r\n        return this.queue.length;\r\n    }\r\n}","import React from 'react';\r\nimport{ Transition, CSSTransition } from 'react-transition-group'\r\n\r\nimport Tooltips from '../../Tooltips/Tooltips.jsx'\r\nimport InputModal from '../../Additional/InputModal/InputModal.jsx'\r\nimport ErrorMessage from '../../Additional/ErrorMessage/ErrorMessage.jsx'\r\n\r\nimport Queue from '../../Additional/Queue.js'\r\nimport { randomIntFromInverval } from '../../Additional/Helpers.js'\r\n\r\nimport './BinarySearchTree.scss'\r\n\r\nclass BinarySearchTreeNode {\r\n    constructor(val) {\r\n        this.value = val;\r\n        this.left  = null;\r\n        this.right = null;\r\n\r\n        this.animations = {\r\n            initial: {\r\n                node: { active: false, delay: 0 },\r\n                line: { active: false, delay: 0 }\r\n            },\r\n            visited: {\r\n                node: { active: false, delay: 0 },\r\n                line: { active: false, delay: 0 }\r\n            },\r\n            success: {\r\n                node: { active: false, delay: 0 },\r\n                line: { active: false, delay: 0 }\r\n            },\r\n            removed: {\r\n                node: { active: false, delay: 0 },\r\n                line: { active: false, delay: 0 }\r\n            }\r\n        };\r\n\r\n        this.moveAnimations = {\r\n            active: false,\r\n            delay: 0,\r\n            css: {\r\n                entering: {},\r\n                entered:  {},\r\n                exiting:  {},\r\n                exited:   {}\r\n            }\r\n        };\r\n    }\r\n}\r\n\r\nexport default class BinarySearchTree extends React.Component {\r\n    constructor(props) {\r\n        super(props);\r\n\r\n        this.initialStateOperation = 'Initial';\r\n\r\n        this.visibleClasses = {\r\n            appearDone: 'visible',\r\n            enterDone: 'visible',\r\n            exit: 'visible'\r\n        };\r\n\r\n        this.operationSteps = {\r\n            Initial: [\r\n                'Initial'\r\n            ],\r\n            Generate: [\r\n                'Reset',\r\n                'Generate'\r\n            ],\r\n            Reset: [\r\n                'Hide',\r\n                'Reset'\r\n            ],\r\n            Insert: [\r\n                'Input',\r\n                'Insert',\r\n                'Complete'\r\n            ],\r\n            Remove: [\r\n                'Input',\r\n                'Remove 1',\r\n                'Remove 2',\r\n                'Remove 3',\r\n                'Remove 4',\r\n                'Complete'\r\n            ],\r\n            Search: [\r\n                'Input',\r\n                'Search'\r\n            ],\r\n            'Pre-Order': [\r\n                'Traverse'\r\n            ],\r\n            'In-Order': [\r\n                'Traverse'\r\n            ],\r\n            'Post-Order': [\r\n                'Traverse'\r\n            ],\r\n            'Level Order': [\r\n                'Traverse'\r\n            ]\r\n        };\r\n\r\n        this.name = 'BinarySearchTree';\r\n        this.key  = 'BST';\r\n        this.root = null;\r\n\r\n        this.removeValue = null;\r\n        this.targetValue = null;\r\n        this.targetNode = null;\r\n        this.timeout = 0;\r\n        this.input = false;\r\n        this.waiting = false;\r\n        this.errorMessage = {\r\n            message: '',\r\n            key: null\r\n        };\r\n\r\n        this.state = {\r\n            operation: this.initialStateOperation,\r\n            step: 0,\r\n            tooltips: false,\r\n            destroy: true\r\n        };\r\n\r\n        this.receiveInput = this.receiveInput.bind(this);\r\n        this.advanceOperationStepFromTooltips = this.advanceOperationStepFromTooltips.bind(this);\r\n    }\r\n\r\n    componentDidMount() {\r\n        this.setState({ operation: 'Generate', step: 0 });\r\n    }\r\n    \r\n    static getDerivedStateFromProps(newProps, state) {\r\n        const initialStateOperation = 'Initial';\r\n        const destroyStateOperation = 'Destroy';\r\n\r\n        if ( newProps.operation === destroyStateOperation ) {\r\n            return { operation: 'Reset', step: 0, destroy: true };\r\n        }\r\n        else if ( newProps.operation !== initialStateOperation ) {\r\n            if ( state.operation === initialStateOperation ) {\r\n                return { operation: newProps.operation, tooltips: newProps.tooltips };\r\n            }\r\n            else if ( newProps.tooltips !== state.tooltips ) {\r\n                return { tooltips: newProps.tooltips };\r\n            } \r\n        }\r\n        else if ( newProps.tooltips !== state.tooltips ) {\r\n            return { tooltips: newProps.tooltips };\r\n        }\r\n\r\n        return null;\r\n    }\r\n\r\n    shouldComponentUpdate(nextProps, nextState) {\r\n        if ( nextState.destroy ) {\r\n            return true;\r\n        }\r\n        else if ( this.waiting && (this.state.tooltips === nextState.tooltips) ) {\r\n            if ( nextProps.operation !== this.initialStateOperation && nextProps.operation !== this.state.operation ) {\r\n                this.errorMessage['message'] = 'Error: Tree performing operation';\r\n                this.errorMessage['key'] = new Date().getTime();\r\n                return true;\r\n            }\r\n            return false;\r\n        }\r\n        else {\r\n            return true;\r\n        }\r\n    }\r\n\r\n    render() {\r\n        this.performOperationStep();\r\n\r\n        return (\r\n            <>\r\n                { this.input ?\r\n                    <InputModal operation = {this.state.operation} callback = {this.receiveInput} />\r\n                : null }\r\n\r\n                <ErrorMessage message = {this.errorMessage['message']} key = {this.errorMessage['key']} />\r\n\r\n                <div\r\n                    id={ this.name }\r\n                    className='tree'\r\n                    style={ {transform: this.getScaleFactor()} }>\r\n\r\n                    { this.Tree() }\r\n\r\n                </div>\r\n\r\n                <Tooltips\r\n                    active = {this.state.tooltips}\r\n                    operation = {this.state.operation}\r\n                    step = {this.state.step}\r\n                    next = {this.advanceOperationStepFromTooltips} />\r\n            </>\r\n        );\r\n    }\r\n\r\n    componentDidUpdate() {\r\n        this.advanceOperationStep();\r\n    }\r\n\r\n    /* Handle calling function to perform animations for a given operation */\r\n\r\n    performOperationStep() {\r\n        switch( this.state.operation ) {\r\n            case 'Generate':    this.GenerateTree();   break;\r\n            case 'Reset':       this.ResetTree();      break;\r\n            case 'Insert':      this.InsertInTree();   break;\r\n            case 'Remove':      this.RemoveFromTree(); break; \r\n            case 'Search':      this.SearchTree();     break;\r\n            case 'Pre-Order':\r\n            case 'In-Order':\r\n            case 'Post-Order':\r\n            case 'Level Order': this.TraverseTree();   break;\r\n            case 'Initial':\r\n            default:            this.InitialTree();    break;\r\n        }\r\n    }\r\n\r\n    /* Advances operation step asynchonously based on timeout set */\r\n    \r\n    advanceOperationStep() {\r\n        if ( this.state.operation !== this.initialStateOperation ) {\r\n            if ( this.state.step >= this.operationSteps[ this.state.operation ].length - 1 ) {\r\n                if ( ! this.waiting ) {\r\n                    let _this = this;\r\n                    _this.waiting = true;\r\n                    setTimeout(function() {\r\n                        _this.waiting = false;\r\n                        if ( ! _this.state.tooltips || (_this.state.operation === 'Generate') || (_this.state.operation === 'Reset') ) {\r\n                            _this.setState({ operation: 'Initial', step: 0 });\r\n                        }\r\n                    }, _this.timeout);\r\n                }\r\n            }\r\n            else {\r\n                if ( this.operationSteps[ this.state.operation ][ this.state.step ] === 'Input' ) return;\r\n\r\n                if ( ! this.waiting ) {\r\n                    let _this = this;\r\n                    _this.waiting = true;\r\n                    setTimeout(function() {\r\n                        _this.waiting = false;\r\n                        if ( ! _this.state.tooltips || (_this.state.operation === 'Generate') || (_this.state.operation === 'Reset') ) {\r\n                            _this.setState({ step: _this.state.step + 1 });\r\n                        }\r\n                    }, _this.timeout);\r\n                }\r\n            }\r\n        }\r\n    }\r\n\r\n    advanceOperationStepFromTooltips() {\r\n        if ( this.state.step >= this.operationSteps[ this.state.operation ].length - 1 ) {\r\n            this.setState({ operation: 'Initial', step: 0 });\r\n        }\r\n        else {\r\n            this.setState({ step: this.state.step + 1 });\r\n        }\r\n    }\r\n\r\n    /* Basic internal tree operations */\r\n\r\n    insertNumElements(elements) {\r\n        for (let i = 0; i < elements; ++i) {\r\n            let val = randomIntFromInverval(1, 150);\r\n            if ( this.insert( val ) ) {\r\n                if ( this.height() > 5 ) {\r\n                    this.root = this.remove( val );\r\n                    --i;\r\n                }\r\n            }\r\n            else {\r\n                --i;\r\n            }\r\n        }\r\n    }\r\n\r\n    reset() {\r\n        this.root = null;\r\n    }\r\n\r\n    height(node = this.root) {\r\n        if (node === null) return 0;\r\n        return Math.max( this.height(node.left), this.height(node.right) ) + 1;\r\n    }\r\n\r\n    contains(val, node = this.root) {\r\n        if ( ! node ) return false;\r\n\r\n        if (val < node.value) {\r\n            return this.contains(val, node.left);\r\n        }\r\n        else if (val > node.value) {\r\n            return this.contains(val, node.right);\r\n        }\r\n        else {\r\n            return true;\r\n        }\r\n    }\r\n\r\n    insert(val) {\r\n        if (this.root === null) {\r\n            this.root = new BinarySearchTreeNode(val);\r\n            return true;\r\n        }\r\n        \r\n        let curr = this.root;\r\n\r\n        while (true) {\r\n            if (curr.value === val) {\r\n                //tree contains key already\r\n                return false;\r\n            }\r\n            else if (curr.value < val) {\r\n                if(curr.right === null) {\r\n                    curr.right = new BinarySearchTreeNode(val);\r\n                    return true;\r\n                }\r\n                curr = curr.right;\r\n            }\r\n            else {\r\n                if(curr.left === null) {\r\n                    curr.left = new BinarySearchTreeNode(val);\r\n                    return true;\r\n                }\r\n                curr = curr.left;\r\n            }\r\n        }\r\n    }\r\n\r\n    remove(val, node = this.root) {\r\n        if ( ! val ) return;\r\n\r\n        if ( node === null ) return node;\r\n\r\n        if ( val < node.value ) {\r\n            node.left = this.remove(val, node.left);\r\n        }\r\n        else if ( val > node.value ) {\r\n            node.right = this.remove(val, node.right);\r\n        }\r\n        else {\r\n            if ( node.left === null ) {\r\n                return node.right;\r\n            }\r\n            else if ( node.right === null ) {\r\n                return node.left;\r\n            }\r\n            else {\r\n                node.value = this.inOrderSuccessor(node.right);\r\n                node.right = this.remove(node.value, node.right);\r\n            }\r\n        }\r\n\r\n        return node;\r\n    }\r\n\r\n    inOrderSuccessor(node) {\r\n        if ( node.left !== null ) {\r\n            return this.inOrderSuccessor(node.left);\r\n        }\r\n        else {\r\n            return node.value;\r\n        }\r\n    }\r\n\r\n    getScaleFactor() {\r\n        let scale_factor = (window.innerWidth - 20) / ( Math.pow(2, this.height() - 1) * 70 );\r\n        return 'scale(' + (scale_factor > 1 ? 1 : scale_factor) + ')';\r\n    }\r\n\r\n    /* Handle creating Tree nodes and lines in DOM */\r\n\r\n    Tree(node = this.root, tree_height = this.height(), curr_height = 0, pos = 'root') {\r\n        if (curr_height === tree_height) return null;\r\n\r\n        const leftChild  = this.Tree(node ? node.left  : null, tree_height, curr_height + 1, 'left');\r\n        const rightChild = this.Tree(node ? node.right : null, tree_height, curr_height + 1, 'right');\r\n        \r\n        const classes = ['node-wrapper', pos].join(' ');\r\n\r\n        if ( node === null ) {\r\n            return (\r\n                <>\r\n                    <div\r\n                        className={classes}\r\n                        node-value='null'>\r\n\r\n                            <div className='node-value' />\r\n\r\n                            {leftChild}\r\n                            {rightChild}\r\n                    </div>\r\n                </>\r\n            );\r\n        }\r\n        else {\r\n            const rootWidth = {\r\n                width: ( node === this.root ) ? Math.pow(2, tree_height - 1) * 70 + 'px' : null\r\n            };\r\n\r\n            return (\r\n                <>\r\n                    <Transition\r\n                        in={node.moveAnimations['active']}\r\n                        timeout={node.moveAnimations['delay']}\r\n                        appear={true}>\r\n\r\n                        {state => (\r\n\r\n                            <div\r\n                                className={classes}\r\n                                node-value={node.value}\r\n                                node-layer={tree_height - curr_height}\r\n                                style={( node === this.root && ! node.moveAnimations['active'] ) ? rootWidth : node.moveAnimations['css'][state]}>\r\n\r\n                                <CSSTransition\r\n                                    in={node.animations['initial']['node']['active']}\r\n                                    timeout={node.animations['initial']['node']['delay']}\r\n                                    classNames={this.visibleClasses}\r\n                                    appear={true}>\r\n\r\n                                    <div className='node-value'>\r\n                                        {this.getNodeHover(node.value)}\r\n                                        {this.getCricle(node)}\r\n                                    </div>\r\n\r\n                                </CSSTransition>\r\n\r\n                                {leftChild}\r\n                                {rightChild}\r\n\r\n                                {this.getConnectingLine(node, pos)}\r\n\r\n                            </div>\r\n                        )}\r\n\r\n                    </Transition>\r\n                </>\r\n            );\r\n        }\r\n    }\r\n\r\n    getCricle(node) {\r\n        return (\r\n            <>\r\n                <svg className='circle node-value-circle' xmlns='http://www.w3.org/2000/svg'>\r\n\r\n                    <circle className='circle node-circle initial' r='24' cx='25' cy='25' fill='none' />\r\n\r\n                    <CSSTransition\r\n                        in={node.animations['visited']['node']['active']}\r\n                        timeout={node.animations['visited']['node']['delay']}\r\n                        classNames={this.visibleClasses}\r\n                        appear={true}>\r\n\r\n                        <svg className='circle node-circle-traversal' xmlns='http://www.w3.org/2000/svg'>\r\n                            <circle className='circle node-circle-background visited' r='24' cx='25' cy='25' fill='none' />\r\n                            <circle className='circle node-circle visited' r='24' cx='25' cy='25' fill='none' />\r\n                        </svg>\r\n\r\n                    </CSSTransition>\r\n\r\n                    <CSSTransition\r\n                        in={node.animations['success']['node']['active']}\r\n                        timeout={node.animations['success']['node']['delay']}\r\n                        classNames={this.visibleClasses}\r\n                        appear={true}>\r\n\r\n                        <svg className='circle node-circle-traversal' xmlns='http://www.w3.org/2000/svg'>\r\n                            <circle className='circle node-circle-background success' r='24' cx='25' cy='25' fill='none' />\r\n                            <circle className='circle node-circle success' r='24' cx='25' cy='25' fill='none' />\r\n                        </svg>\r\n\r\n                    </CSSTransition>\r\n\r\n                    <CSSTransition\r\n                        in={node.animations['removed']['node']['active']}\r\n                        timeout={node.animations['removed']['node']['delay']}\r\n                        classNames={this.visibleClasses}\r\n                        appear={true}>\r\n\r\n                        <svg className='circle node-circle-traversal' xmlns='http://www.w3.org/2000/svg'>\r\n                            <circle className='circle node-circle-background removed' r='24' cx='25' cy='25' fill='none' />\r\n                            <circle className='circle node-circle removed' r='24' cx='25' cy='25' fill='none' />\r\n                        </svg>\r\n\r\n                    </CSSTransition>\r\n                    \r\n                    <text className='text node-value-text' x='50%' y='50%' fill='black' textAnchor='middle' dominantBaseline='central'>\r\n                        {node.value}\r\n                    </text>\r\n\r\n                </svg>\r\n            </>\r\n        );\r\n    }\r\n\r\n    getNodeHover(val) {\r\n        return (\r\n            <>\r\n                <span className='node-hover'>\r\n                    <i className='fas fa-search' onClick={() => this.searchNode(val)} />\r\n                    <span className='search'>\r\n                        <svg className='circle' xmlns='http://www.w3.org/2000/svg'>\r\n                            <circle className='circle node-hover-circle' r='24' cx='25' cy='25' fill='none' />\r\n                        </svg>\r\n                    </span>\r\n\r\n                    <i className='fas fa-trash' onClick={() => this.deleteNode(val)} />\r\n                    <span className='trash'>\r\n                        <svg className='circle' xmlns='http://www.w3.org/2000/svg'>\r\n                            <circle className='circle node-hover-circle' r='24' cx='25' cy='25' fill='none' />\r\n                        </svg>\r\n                    </span>\r\n                </span>\r\n            </>\r\n        );\r\n    }\r\n    \r\n    getConnectingLine(node, pos) {\r\n        if (pos === 'left' || pos === 'right') {\r\n            return (\r\n                <>\r\n                    <CSSTransition\r\n                        in={node.animations['initial']['line']['active']}\r\n                        timeout={node.animations['initial']['line']['delay']}\r\n                        classNames={this.visibleClasses}\r\n                        appear={true}>\r\n\r\n                        <svg className='line node-line' xmlns='http://www.w3.org/2000/svg'>\r\n\r\n                            {this.getLine(pos, 'initial')}\r\n\r\n                            <CSSTransition\r\n                                in={node.animations['visited']['line']['active']}\r\n                                timeout={node.animations['visited']['line']['delay']}\r\n                                classNames={this.visibleClasses}\r\n                                appear={true}>\r\n\r\n                                {this.getLine(pos, 'visited')}\r\n\r\n                            </CSSTransition>\r\n\r\n                            <CSSTransition\r\n                                in={node.animations['success']['line']['active']}\r\n                                timeout={node.animations['success']['line']['delay']}\r\n                                classNames={this.visibleClasses}\r\n                                appear={true}>\r\n\r\n                                {this.getLine(pos, 'success')}\r\n\r\n                            </CSSTransition>\r\n\r\n                            <CSSTransition\r\n                                in={node.animations['removed']['line']['active']}\r\n                                timeout={node.animations['removed']['line']['delay']}\r\n                                classNames={this.visibleClasses}\r\n                                appear={true}>\r\n\r\n                                {this.getLine(pos, 'removed')}\r\n\r\n                            </CSSTransition>\r\n\r\n                        </svg>\r\n\r\n                    </CSSTransition>\r\n                </>\r\n            );\r\n        }\r\n        else {\r\n            return null;\r\n        }\r\n    }\r\n\r\n    getLine(pos, addClass) {\r\n        const classes = ['line', addClass].join(' ');\r\n\r\n        if (pos === 'left')\r\n            return ( <line className={classes} x1='0' y1='50' x2='100%' y2='0' /> );\r\n        else if (pos === 'right')\r\n            return ( <line className={classes} x1='0' y1='0' x2='100%' y2='50' /> );\r\n        else\r\n            return null;\r\n    }\r\n\r\n    /* Handle operation step */\r\n\r\n    InitialTree() {\r\n        this.removeValue = null;\r\n        this.targetValue = null;\r\n        this.targetNode = null;\r\n        this.timeout = 0;\r\n        this.input = false;\r\n        this.waiting = false;\r\n\r\n        this.setHideTraversalAnimations();\r\n        this.setHideMoveAnimations();\r\n\r\n        if ( document.querySelector('.moved') ) {\r\n            document.querySelector('.moved').classList.remove('moved');\r\n        }\r\n    }\r\n\r\n    GenerateTree() {\r\n        switch( this.operationSteps[ this.state.operation ][ this.state.step ] ) {\r\n            case 'Reset':\r\n                if (this.root) {\r\n                    this.setHideAnimations();\r\n                    this.timeout = 1000;\r\n                }\r\n                else {\r\n                    this.timeout = 0;\r\n                }\r\n                break;\r\n            case 'Generate':\r\n                this.reset();\r\n                this.insertNumElements(15);\r\n                this.setGenerationAnimations();\r\n                break;\r\n            default:\r\n                this.InitialTree();\r\n                break;\r\n        }\r\n    }\r\n    \r\n    ResetTree() {\r\n        switch( this.operationSteps[ this.state.operation ][ this.state.step ] ) {\r\n            case 'Hide':\r\n                if (this.root) {\r\n                    this.setHideAnimations();\r\n                    this.timeout = 1000;\r\n                }\r\n                else {\r\n                    this.timeout = 0;\r\n                }\r\n                break;\r\n            case 'Reset':\r\n                this.reset();\r\n                this.timeout = 0;\r\n                break;\r\n            default:\r\n                this.InitialTree();\r\n                break;\r\n        }\r\n    }\r\n    \r\n    InsertInTree(val) {\r\n        switch( this.operationSteps[ this.state.operation ][ this.state.step ] ) {\r\n            case 'Input':\r\n                this.input = true;\r\n                break;\r\n            case 'Insert':\r\n                if ( this.targetValue ) {\r\n                    if ( ! this.contains(this.targetValue) ) {\r\n                        this.insert(this.targetValue);\r\n                        this.timeout = this.setInsertAnimations();\r\n                    }\r\n                    else {\r\n                        this.targetValue = null;\r\n                        this.errorMessage['message'] = 'Error: Tree already contains element';\r\n                        this.errorMessage['key'] = new Date().getTime();\r\n                    }\r\n                }\r\n                break;\r\n            case 'Complete':\r\n                if ( this.targetValue ) {\r\n                    this.setInsertionCompleteAnimations();\r\n                    this.timeout = 5000;\r\n                }\r\n                break;\r\n            default:\r\n                this.InitialTree();\r\n                break;\r\n        }\r\n    }\r\n    \r\n    RemoveFromTree() {\r\n        switch( this.operationSteps[ this.state.operation ][ this.state.step ] ) {\r\n            case 'Input':\r\n                if ( this.root ) {\r\n                    this.input = true;\r\n                }\r\n                else {\r\n                    this.errorMessage['message'] = 'Error: Tree is empty';\r\n                    this.errorMessage['key'] = new Date().getTime();\r\n                }\r\n                break;\r\n            case 'Remove 1':\r\n                if ( this.targetValue ) {\r\n                    if ( this.contains(this.targetValue) ) {\r\n                        this.timeout = this.setRemoveAnimations() + 3000;\r\n                    }\r\n                    else {\r\n                        this.targetValue = null;\r\n                        this.errorMessage['message'] = 'Error: Tree does not contain element';\r\n                        this.errorMessage['key'] = new Date().getTime(); \r\n                    }\r\n                }\r\n                break;\r\n            case 'Remove 2':\r\n                if ( this.targetValue ) {\r\n                    this.timeout = this.setMoveSubtreeAnimations() + 3000;\r\n                }\r\n                break;\r\n            case 'Remove 3':\r\n                if ( this.targetValue ) {\r\n                    if ( this.targetNode ) {\r\n                        this.timeout = this.setRemoveAnimations() + 3000;\r\n                    }\r\n                    else {\r\n                        this.timeout = 0;\r\n                    }\r\n                }\r\n                break;\r\n            case 'Remove 4':\r\n                if ( this.targetValue ) {\r\n                    if ( this.targetNode ) {\r\n                        this.timeout = this.setMoveSubtreeAnimations() + 3000;\r\n                    }\r\n                    else {\r\n                        this.timeout = 0;\r\n                    }\r\n                }\r\n                break;\r\n            case 'Complete':\r\n                if ( this.targetValue ) {\r\n                    this.root = this.remove(this.removeValue);\r\n                    this.setHideMoveAnimations();\r\n                    this.setHideTraversalAnimations();\r\n                    document.querySelector('.root').classList.add('moved');\r\n                    this.timeout = 2000;\r\n                }\r\n                break;\r\n            default:\r\n                this.InitialTree();\r\n                break;\r\n        }\r\n    }\r\n    \r\n    SearchTree() {\r\n        switch( this.operationSteps[ this.state.operation ][ this.state.step ] ) {\r\n            case 'Input':\r\n                if ( this.root ) {\r\n                    this.input = true;\r\n                }\r\n                else {\r\n                    this.errorMessage['message'] = 'Error: Tree is empty';\r\n                    this.errorMessage['key'] = new Date().getTime();\r\n                }\r\n                break;\r\n            case 'Search':\r\n                if ( this.targetValue ) {\r\n                    this.timeout = this.setSearchAnimations() + 7000;\r\n\r\n                    if ( ! this.contains(this.targetValue) ) {\r\n                        let _this = this;\r\n                        setTimeout(function() {\r\n                            _this.errorMessage['message'] = 'Tree does not contain element';\r\n                            _this.errorMessage['key'] = new Date().getTime();\r\n                            _this.forceUpdate();\r\n                        }, _this.timeout - 6000);\r\n                    }\r\n                }\r\n                break;\r\n            default:\r\n                this.InitialTree();\r\n                break;\r\n        }\r\n    }\r\n\r\n    TraverseTree() {\r\n        if ( this.root ) {\r\n            switch( this.state.operation ) {\r\n                case 'Pre-Order':\r\n                case 'In-Order':\r\n                case 'Post-Order':\r\n                    this.timeout = this.setDFSTraversalAnimations( this.state.operation ) + 5000;\r\n                    break;\r\n                case 'Level Order':\r\n                    this.timeout = this.setBFSTraversalAnimations() + 5000;\r\n                    break;\r\n                default:\r\n                    this.InitialTree();\r\n                    break;\r\n            }\r\n        }\r\n        else {\r\n            this.errorMessage['message'] = 'Error: Tree is empty';\r\n            this.errorMessage['key'] = new Date().getTime();\r\n        }\r\n    }\r\n\r\n    /* Node hover operations and input dialog */\r\n\r\n    receiveInput(val) {\r\n        this.targetValue = val;\r\n        this.input = false;\r\n\r\n        if ( this.state.operation === 'Remove' ){\r\n            this.deleteNode(val);\r\n        }\r\n        else {\r\n            this.setState({ step: this.state.step + 1 });\r\n        }\r\n    }\r\n\r\n    searchNode(val) {\r\n        this.targetValue = val;\r\n        this.setState({ operation: 'Search', step: 1 });\r\n    }\r\n\r\n    deleteNode(val) {\r\n        this.targetValue = val;\r\n        this.removeValue = val;\r\n        this.targetNode = this.root;\r\n        this.setState({ operation: 'Remove', step: 1 });\r\n    }\r\n\r\n    /* Set animations for nodes for given operation step */\r\n\r\n    setGenerationAnimations() {\r\n        let queue = new Queue();\r\n        queue.push(this.root);\r\n\r\n        let delay = 150;\r\n\r\n        while ( ! queue.empty() ) {\r\n            let node = queue.front();\r\n\r\n            if (node) {\r\n                queue.push(node.left);\r\n                queue.push(node.right);\r\n\r\n                for (let key in node.animations['initial']) {\r\n                    node.animations['initial'][key]['active'] = true;\r\n                    node.animations['initial'][key]['delay'] = delay;\r\n                }\r\n                \r\n                delay += 200;\r\n            }\r\n        }\r\n    }\r\n\r\n    setHideAnimations(node = this.root) {\r\n        if (node === null) return;\r\n\r\n        for (let state in node.animations) {\r\n            for (let element in node.animations[state]) {\r\n                node.animations[state][element]['active'] = false;\r\n                node.animations[state][element]['delay'] = 150;\r\n            }\r\n        }\r\n\r\n        this.setHideAnimations(node.left);\r\n        this.setHideAnimations(node.right);\r\n    }\r\n\r\n    setHideTraversalAnimations(node = this.root) {\r\n        if (node === null) return;\r\n\r\n        for (let state in node.animations) {\r\n            for (let element in node.animations[state]) {\r\n                if (state === 'initial') {\r\n                    node.animations[state][element]['active'] = true;\r\n                    node.animations[state][element]['delay'] = 0;\r\n                }\r\n                else {\r\n                    node.animations[state][element]['active'] = false;\r\n                    node.animations[state][element]['delay'] = 150;\r\n                }\r\n            }\r\n        }\r\n\r\n        this.setHideTraversalAnimations(node.left);\r\n        this.setHideTraversalAnimations(node.right);\r\n    }\r\n\r\n    setHideMoveAnimations(node = this.root) {\r\n        if (node === null) return;\r\n\r\n        node.moveAnimations['active'] = false;\r\n        node.moveAnimations['delay'] = 0;\r\n        node.moveAnimations['css'] = {\r\n            entering: {},\r\n            entered:  {},\r\n            exiting:  {},\r\n            exited:   {}\r\n        };\r\n\r\n        this.setHideMoveAnimations(node.left);\r\n        this.setHideMoveAnimations(node.right);\r\n    }\r\n\r\n    setDFSTraversalAnimations(order, node = this.root, delay = 150) {\r\n        if (node === null) return delay;\r\n\r\n        let _delay = node === this.root ? delay : delay + 1000;\r\n\r\n        node.animations['visited']['node']['active'] = true;\r\n        node.animations['visited']['node']['delay'] = _delay + 500;\r\n        node.animations['visited']['line']['active'] = true;\r\n        node.animations['visited']['line']['delay'] = _delay;\r\n\r\n        if (order === 'Pre-Order') {\r\n            _delay += 1000;\r\n            node.animations['success']['node']['active'] = true;\r\n            node.animations['success']['node']['delay'] = _delay;\r\n        }\r\n\r\n        _delay = this.setDFSTraversalAnimations(order, node.left, _delay);\r\n\r\n        if (order === 'In-Order') {\r\n            _delay += 1000;\r\n            node.animations['success']['node']['active'] = true;\r\n            node.animations['success']['node']['delay'] = _delay;\r\n        }\r\n\r\n        _delay = this.setDFSTraversalAnimations(order, node.right, _delay);\r\n\r\n        if (order === 'Post-Order') {\r\n            _delay += 1000;\r\n            node.animations['success']['node']['active'] = true;\r\n            node.animations['success']['node']['delay'] = _delay;\r\n        }\r\n\r\n        node.animations['success']['line']['active'] = true;\r\n        node.animations['success']['line']['delay'] = _delay;\r\n\r\n        return _delay;\r\n    }\r\n\r\n    setBFSTraversalAnimations() {\r\n        let queue = new Queue();\r\n\r\n        let delay = 150;\r\n\r\n        if (this.root) {\r\n            queue.push(this.root);\r\n\r\n            this.root.animations['visited']['node']['active'] = true;\r\n            this.root.animations['visited']['node']['delay'] = delay;\r\n        }\r\n\r\n        while ( ! queue.empty() ) {\r\n            let node = queue.front();\r\n\r\n            if (node) {\r\n                if (node.left) {\r\n                    queue.push(node.left);\r\n\r\n                    delay += 1000;\r\n                    for (let element in node.left.animations['visited']) {\r\n                        node.left.animations['visited'][element]['active'] = true;\r\n                        node.left.animations['visited'][element]['delay'] = delay;\r\n                    }\r\n                }\r\n\r\n                if (node.right) {\r\n                    queue.push(node.right);\r\n\r\n                    delay += 1000;\r\n                    for (let element in node.right.animations['visited']) {\r\n                        node.right.animations['visited'][element]['active'] = true;\r\n                        node.right.animations['visited'][element]['delay'] = delay;\r\n                    }\r\n                }\r\n                \r\n                delay += 1000;\r\n                for (let element in node.animations['success']) {\r\n                    node.animations['success'][element]['active'] = true;\r\n                    node.animations['success'][element]['delay'] = delay;\r\n                }\r\n            }\r\n        }\r\n\r\n        return delay;\r\n    }\r\n\r\n    setSearchAnimations(node = this.root, delay = 150) {\r\n        if ( ! this.targetValue || ! node ) return delay;\r\n        else {\r\n            let _delay = delay;\r\n\r\n            if (this.targetValue === node.value) {\r\n                node.animations['success']['node']['active'] = true;\r\n                node.animations['success']['node']['delay'] = delay + 1250;\r\n            }\r\n            else if (this.targetValue < node.value)\r\n                _delay = this.setSearchAnimations(node.left, delay + 1000);\r\n            else\r\n                _delay = this.setSearchAnimations(node.right, delay + 1000);\r\n                \r\n            node.animations['visited']['node']['active'] = true;\r\n            node.animations['visited']['node']['delay'] = delay + 500;\r\n            node.animations['visited']['line']['active'] = true;\r\n            node.animations['visited']['line']['delay'] = delay;\r\n\r\n            return _delay;\r\n        }\r\n    }\r\n\r\n    setInsertAnimations(node = this.root, delay = 150) {\r\n        if ( ! this.targetValue || ! node ) return delay;\r\n        else {\r\n            let _delay = delay;\r\n\r\n            if (this.targetValue === node.value) {\r\n                this.targetNode = node;\r\n                return _delay;\r\n            }\r\n            else if (this.targetValue < node.value)\r\n                _delay = this.setInsertAnimations(node.left, delay + 1000);\r\n            else\r\n                _delay = this.setInsertAnimations(node.right, delay + 1000);\r\n                \r\n            node.animations['visited']['node']['active'] = true;\r\n            node.animations['visited']['node']['delay'] = delay + 500;\r\n            node.animations['visited']['line']['active'] = true;\r\n            node.animations['visited']['line']['delay'] = delay;\r\n\r\n            return _delay;\r\n        }\r\n    }\r\n\r\n    setInsertionCompleteAnimations() {\r\n        let node = this.targetNode;\r\n\r\n        if ( node ) {\r\n            node.animations['initial']['node']['active'] = true;\r\n            node.animations['initial']['node']['delay'] = 650;\r\n            node.animations['initial']['line']['active'] = true;\r\n            node.animations['initial']['line']['delay'] = 150;\r\n            node.animations['success']['node']['active'] = true;\r\n            node.animations['success']['node']['delay'] = 1250;\r\n        }\r\n    }\r\n\r\n    setRemoveAnimations(node = this.targetNode, delay = 150) {\r\n        if ( ! this.targetValue || ! node ) return delay;\r\n        else {    \r\n            node.animations['visited']['node']['active'] = true;\r\n            node.animations['visited']['node']['delay'] = delay + 500;\r\n            node.animations['visited']['line']['active'] = true;\r\n            node.animations['visited']['line']['delay'] = delay;\r\n\r\n            if (this.targetValue === node.value) {\r\n                node.animations['success']['node']['active'] = false;\r\n                node.animations['success']['node']['delay'] = delay;\r\n                node.animations['success']['line']['active'] = false;\r\n                node.animations['success']['line']['delay'] = delay;\r\n\r\n                node.animations['removed']['node']['active'] = true;\r\n                node.animations['removed']['node']['delay'] = delay + 1500;\r\n                node.animations['removed']['line']['active'] = true;\r\n                node.animations['removed']['line']['delay'] = delay + 1000;\r\n\r\n                node.animations['initial']['node']['active'] = false;\r\n                node.animations['initial']['node']['delay'] = delay + 1500;\r\n                node.animations['initial']['line']['active'] = false;\r\n                node.animations['initial']['line']['delay'] = delay + 1500;\r\n\r\n                this.targetNode = node;\r\n            }\r\n            else if (this.targetValue < node.value)\r\n                return this.setRemoveAnimations(node.left, delay + 1000);\r\n            else\r\n                return this.setRemoveAnimations(node.right, delay + 1000);\r\n\r\n            return delay;\r\n        }\r\n    }\r\n\r\n    setMoveSubtreeAnimations() {\r\n        let node = this.targetNode;\r\n        let _delay = 0;\r\n\r\n        if ( node ) {\r\n            if ( node.left === null || node.right === null ) {\r\n                node.animations['initial']['line']['active'] = true;\r\n                node.animations['initial']['line']['delay'] = 3000;\r\n    \r\n                node.animations['visited']['node']['active'] = false;\r\n                node.animations['visited']['node']['delay'] = 150;\r\n                node.animations['visited']['line']['active'] = false;\r\n                node.animations['visited']['line']['delay'] = 150;\r\n    \r\n                node.animations['removed']['node']['active'] = false;\r\n                node.animations['removed']['node']['delay'] = 150;\r\n                node.animations['removed']['line']['active'] = false;\r\n                node.animations['removed']['line']['delay'] = 150;\r\n    \r\n                node.animations['success']['line']['active'] = true;\r\n                node.animations['success']['line']['delay'] = 3500;\r\n\r\n                if ( node.left === null && node.right === null ) {\r\n                    node.animations['initial']['line']['active'] = false;\r\n                    node.animations['initial']['line']['delay'] = 0;\r\n\r\n                    node.animations['success']['line']['active'] = false;\r\n                    node.animations['success']['line']['delay'] = 0;\r\n\r\n                    if (\r\n                        ( document.querySelectorAll('.node-wrapper[node-layer=\"1\"]').length === 1 ) && \r\n                        ( parseInt(document.querySelector('.node-wrapper[node-layer=\"1\"]').attributes['node-value'].value) === node.value )\r\n                    ) {\r\n                        this.root.moveAnimations['active'] = true;\r\n                        this.root.moveAnimations['delay'] = 1000;\r\n                        this.root.moveAnimations['css']['entering'] = {\r\n                            'width': document.querySelector('.root').offsetWidth + 'px'\r\n                        };\r\n                        this.root.moveAnimations['css']['entered'] = {\r\n                            'width': document.querySelector('.root').offsetWidth / 2 + 'px'\r\n                        };\r\n                    }\r\n                }\r\n                else {\r\n                    if ( node.left === null ) {\r\n                        node.right.animations['initial']['line']['active'] = false;\r\n                        node.right.animations['initial']['line']['delay'] = 150;\r\n                        \r\n                        node.right.moveAnimations['active'] = true;\r\n                        node.right.moveAnimations['delay'] = 1000;\r\n                        node.right.moveAnimations['css']['entered'] = {\r\n                            'width': '100%',\r\n                            'zIndex': '1000',\r\n                            'transform': 'translate(-50%, -50px)'\r\n                        };\r\n        \r\n                        _delay = this.setMoveSubtreeCompleteAnimations(node.right);\r\n                    }\r\n                    else if ( node.right === null ) {\r\n                        node.left.animations['initial']['line']['active'] = false;\r\n                        node.left.animations['initial']['line']['delay'] = 150;\r\n                        \r\n                        node.left.moveAnimations['active'] = true;\r\n                        node.left.moveAnimations['delay'] = 1000;\r\n                        node.left.moveAnimations['css']['entered'] = {\r\n                            'width': '100%',\r\n                            'zIndex': '1000',\r\n                            'transform': 'translate(0, -50px)'\r\n                        };\r\n        \r\n                        _delay = this.setMoveSubtreeCompleteAnimations(node.left);\r\n                    }\r\n\r\n                    if (\r\n                        document.querySelectorAll('.node-wrapper[node-value=\"' + node.value + '\"] .node-wrapper[node-layer=\"1\"]').length\r\n                        === document.querySelectorAll('.node-wrapper[node-layer=\"1\"]').length\r\n                    ) {\r\n                        this.root.moveAnimations['active'] = true;\r\n                        this.root.moveAnimations['delay'] = 1000;\r\n                        this.root.moveAnimations['css']['entering'] = {\r\n                            'width': document.querySelector('.root').offsetWidth + 'px'\r\n                        };\r\n                        this.root.moveAnimations['css']['entered'] = {\r\n                            'width': document.querySelector('.root').offsetWidth / 2 + 'px'\r\n                        };\r\n                    }\r\n                }\r\n\r\n                this.targetNode = null;\r\n            }\r\n            else {\r\n                let delay = this.setInOrderSuccessorAnimations(node.right);\r\n\r\n                delay += 1000;\r\n\r\n                node.animations['visited']['node']['active'] = false;\r\n                node.animations['visited']['node']['delay'] = delay;\r\n                node.animations['visited']['line']['active'] = false;\r\n                node.animations['visited']['line']['delay'] = delay;\r\n\r\n                node.animations['removed']['node']['active'] = false;\r\n                node.animations['removed']['node']['delay'] = delay;\r\n                node.animations['removed']['line']['active'] = false;\r\n                node.animations['removed']['line']['delay'] = delay;\r\n\r\n                delay += 1000;\r\n\r\n                node.animations['initial']['node']['active'] = true;\r\n                node.animations['initial']['node']['delay'] = delay;\r\n                node.animations['initial']['line']['active'] = true;\r\n                node.animations['initial']['line']['delay'] = delay + 500;\r\n\r\n                delay += 1000;\r\n\r\n                node.animations['success']['node']['active'] = true;\r\n                node.animations['success']['node']['delay'] = delay + 500;\r\n                node.animations['success']['line']['active'] = true;\r\n                node.animations['success']['line']['delay'] = delay;\r\n\r\n                _delay = delay;\r\n            }\r\n        }\r\n\r\n        return _delay;\r\n    }\r\n\r\n    setMoveSubtreeCompleteAnimations(node, delay = 4000, first = true) {\r\n        let _delay = delay;\r\n\r\n        if (node) {\r\n            if (first) {\r\n                node.animations['success']['node']['active'] = true;\r\n                node.animations['success']['node']['delay'] = delay;\r\n            }\r\n            else {\r\n                node.animations['success']['node']['active'] = true;\r\n                node.animations['success']['node']['delay'] = delay;\r\n                node.animations['success']['line']['active'] = true;\r\n                node.animations['success']['line']['delay'] = delay;\r\n            }\r\n\r\n            _delay = Math.max(\r\n                this.setMoveSubtreeCompleteAnimations(node.left, delay + 300, false), \r\n                this.setMoveSubtreeCompleteAnimations(node.right, delay + 300, false)\r\n            );\r\n        }\r\n\r\n        return _delay;\r\n    }\r\n\r\n    setInOrderSuccessorAnimations(node, delay = 150) {\r\n        node.animations['visited']['node']['active'] = true;\r\n        node.animations['visited']['node']['delay'] = delay + 500;\r\n        node.animations['visited']['line']['active'] = true;\r\n        node.animations['visited']['line']['delay'] = delay;\r\n\r\n        if ( node.left ) {\r\n            return this.setInOrderSuccessorAnimations(node.left, delay + 1000);\r\n        }\r\n        else {\r\n            node.animations['success']['node']['active'] = true;\r\n            node.animations['success']['node']['delay'] = delay + 1500;\r\n            node.animations['success']['line']['active'] = true;\r\n            node.animations['success']['line']['delay'] = delay + 1000;\r\n\r\n            document.querySelector('.node-wrapper[node-value=\"' + this.targetValue + '\"]>.node-value .node-value-text').textContent = node.value;\r\n\r\n            this.targetNode = node;\r\n            this.targetValue = node.value;\r\n\r\n            return delay + 1500;\r\n        }\r\n    }\r\n}","/* Taken from Stackoverflow */\r\nexport function randomIntFromInverval(min, max) {\r\n    return Math.floor(Math.random() * (max - min + 1) + min);\r\n}","import React from 'react';\r\n\r\nimport NavigationBar from './NavigationBar/NavigationBar.jsx'\r\n\r\nimport BinarySearchTree from './Trees/BinarySearchTree/BinarySearchTree.jsx'\r\n\r\nimport './TreeVisualizer.scss';\r\n\r\n\r\nexport default class TreeVisualizer extends React.Component {\r\n    constructor(props) {\r\n        super(props);\r\n        \r\n        this.initialStateOperation = 'Initial';\r\n\r\n        this.state = {\r\n            tree: 'BST',\r\n            menu_key: 'BST',\r\n            operation: this.initialStateOperation,\r\n            tooltips: false,\r\n            key: null\r\n        };\r\n\r\n        this.performOperation = this.performOperation.bind(this);\r\n        this.toggleTooltips   = this.toggleTooltips.bind(this);\r\n        this.changeTree       = this.changeTree.bind(this);\r\n    }\r\n\r\n    performOperation(operation) {\r\n        this.setState({ operation: operation });\r\n    }\r\n\r\n    toggleTooltips() {\r\n        this.setState({ tooltips: ! this.state.tooltips });\r\n    }\r\n\r\n    changeTree(tree_key) {\r\n        let _this = this;\r\n        let new_key = new Date().getTime();\r\n\r\n        this.setState({ operation: 'Destroy', menu_key: tree_key, key: new_key });\r\n\r\n        setTimeout(function() {\r\n            if ( _this.state.key === new_key ) {\r\n                _this.setState({ tree: tree_key });\r\n            }\r\n        }, 1500);\r\n    }\r\n\r\n    Tree() {\r\n        return (\r\n            <>\r\n                { this.state.tree === 'BST' ?\r\n                    <BinarySearchTree operation = {this.state.operation} tooltips = {this.state.tooltips} />\r\n                : null }\r\n            </>\r\n        );\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <>\r\n                <NavigationBar visualizer = {this} />\r\n                \r\n                { this.Tree() }\r\n            </>\r\n        );\r\n    }\r\n\r\n    componentDidUpdate() {\r\n        if ( this.state.operation !== this.initialStateOperation ) {\r\n            this.setState({ operation: this.initialStateOperation });\r\n        }\r\n    }\r\n}","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport TreeVisualizer from './TreeVisualizer/TreeVisualizer.jsx';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<TreeVisualizer />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}